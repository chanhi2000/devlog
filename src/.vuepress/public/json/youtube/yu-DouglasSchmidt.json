{
  "channel": {
    "id": "DouglasSchmidt",
    "name": "Douglas Schmidt",
    "profile": "https://yt3.googleusercontent.com/ytc/AGIKgqNwYjtDh8_I5YKnFTYjn4JQRVjUnH34ICS3SSlw=s176-c-k-c0x00ffffff-no-rj",
    "banner": "https://yt3.googleusercontent.com/Ej-truz7tgpNU-Qqq1WzsIaCGiXvVi71MmkeZB8J9zNSJrCY-0LbyZPnev_DokVSEEYu1TAvpw=w1060-fcrop64=1,00005a57ffffa5a8-k-c0xffffffff-no-nd-rj"
  },
  "videos": [
    { "id": "jgYwamgqQmM", "title": "Frequently Made Mistakes for Assignment 3" },
    { "id": "RiDI3JGEhcA", "title": "Applying Key Operators in the Flux Class: Case Study ex3 (Part 2)" },
    { "id": "8t3_O9eVFGQ", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1A in CS 891" },
    { "id": "p7a73CkUdYc", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1A in CS 8395" },
    { "id": "zgZsW6BAMbc", "title": "Walkthrough of Assignment 1B for My Scalable Microservices Course" },
    { "id": "1aIq3kn6Soc", "title": "Evaluating Java Structured Concurrency" },
    { "id": "pJAzeTeWgbc", "title": "Programming with Java Structured Concurrency" },
    { "id": "r2OBjHYoSNA", "title": "Overview of Java Structured Concurrency" },
    { "id": "BNs9t4KRA_0", "title": "The PrimeCheck App Case Study: Implementing Server Components (Part 1)" },
    { "id": "IaA_U8eF4dQ", "title": "The PrimeCheck App Case Study: Server Structure and Functionality" },
    { "id": "yAbkzNvWnBM", "title": "The PrimeCheck App Case Study: Overview" },
    { "id": "H-Ucn8g2aOc", "title": "Applying Java Structured Concurrency: Case Study ex5" },
    { "id": "8HQlkqcW7NU", "title": "Programming with Java StructuredTaskScope" },
    { "id": "veOBxOZosNM", "title": "Walkthrough of the Java ShutdownOnFailure Code" },
    { "id": "-cVocUAZ1PM", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1B in CS 891" },
    { "id": "ej980l42svM", "title": "ChatGPT is Just the Beginning: Generative AI will Transform Computing" },
    { "id": "t_c8MJyh1Bo", "title": "Overview of Spring Boot Software Patterns" },
    { "id": "iPNkiZ-7DZg", "title": "Overview of Spring and Sprint Boot" },
    { "id": "T4TypHzUTrg", "title": "CS 891: Scalable Microservices: Overview (Part 4)" },
    { "id": "GXIzEjipIdc", "title": "CS 891: Scalable Microservices: Overview (Part 3)" },
    { "id": "NIigO4rIddM", "title": "CS 891: Scalable Microservices: Overview (Part 2)" },
    { "id": "hC8l0KBNrMg", "title": "The BerraQuotes App Case Study: Implementing the Server Components" },
    { "id": "7dezjSKzc8k", "title": "The BerraQuotes App Case Study: Server Structure and Functionality" },
    { "id": "z2I42aj74bg", "title": "The BerraQuotes App Case Study: Overview" },
    { "id": "qPeIWvWRllE", "title": "Overview of Spring WebMVC" },
    { "id": "Uj1HTId9iKo", "title": "Overview of Spring Boot's Internal Architecture" },
    { "id": "hC8l0KBNrMg", "title": "The BerraQuotes App Case Study: Implementing the Server Components" },
    { "id": "yFsNQPL4eU0", "title": "The BerraQuotes App Case Study: Client Structure and Functionality" },
    { "id": "7dezjSKzc8k", "title": "The BerraQuotes App Case Study: Server Structure and Functionality" },
    { "id": "z2I42aj74bg", "title": "The BerraQuotes App Case Study: Overview" },
    { "id": "3YgaF5Lgias", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1A" },
    { "id": "SPhkiG2z4OA", "title": "Wrapping Up and Looking Ahead Our Discussions on Generative AI" },
    { "id": "_d_cEVpGOrg", "title": "Navigating the Future of AI-Augmented Software Engineering: Part 3" },
    { "id": "NrzB6Tb_k2Y", "title": "Navigating the Future of AI-Augmented Software Engineering: Part 4" },
    { "id": "ufIGVTsF97Y", "title": "Navigating the Future of AI-Augmented Software Engineering: Part 2" },
    { "id": "CHBl0UG2ZnY", "title": "Navigating the Future of AI-Augmented Software Engineering: Part 1" },
    { "id": "CG-4y05yx-4", "title": "Applying ChatGPT-4 as a Static Code Analysis Tool (Part 2)" },
    { "id": "ldrgKjSR-lk", "title": "Applying ChatGPT-4 as a Static Code Analysis Tool (Part 1)" },
    { "id": "s-QchGCMmB4", "title": "Walkthrough of Frequently Made Mistakes for Assignment 2 in CS 5253" },
    { "id": "JF3_kjoIhng", "title": "Refactoring Java Streams with ChatGPT to Enhance Code for Classroom Teaching" },
    { "id": "FrfRBPYH-Ro", "title": "The FileCount Case Study: Overview" },
    { "id": "rUsIrlOgamU", "title": "Summary of the Java (Common) Fork-Join Pool Benefits" },
    { "id": "gLMHqApL05M", "title": "Encapsulating the Java Fork-Join Framework's ManagedBlocker Interface" },
    { "id": "qY4A-5sffoc", "title": "Overview of Generative Artificial Intelligence & Augmented Intelligence (AI+)" },
    { "id": "Cr-NieP4Sz8", "title": "The FileCount Case Study: Performance & Evaluation" },
    { "id": "8wi1Pnt1Iqk", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1 for CS 5253" },
    { "id": "ff729vklWJo", "title": "Very Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2 in CS 253" },
    { "id": "U2wvYD6GWl8", "title": "ChatGPT – Why it Matters" },
    { "id": "zNfjszULxsI", "title": "Visualizing Java Streams in Action" },
    { "id": "WSdPxFH8Nq8", "title": "Understanding Java Streams Common Aggregate Operations" },
    { "id": "vULbNu_f7pI", "title": "Understanding Java Streams Common Creation Operations" },
    { "id": "AFojH0a5v0E", "title": "Overview of Java Streams Phases" },
    { "id": "g5_D2sHqMvg", "title": "Overview of Java Streams" },
    { "id": "LJO_Nb03Zxg", "title": "The History of Parallelism Support in Java" },
    { "id": "-CZUJmaZJWk", "title": "Overview of the Java Fork-Join Framework" },
    { "id": "kc3BxVSXKO4", "title": "The Java ForkJoinTask Class" },
    { "id": "tXrrehxQ9Ew", "title": "Subclasses of the Java ForkJoinTask Class" },
    { "id": "QrzlGA8710w", "title": "The Java ForkJoinPool Class" },
    { "id": "a0A-3PfMND0", "title": "Evaluating Java’s Concurrency & Parallelism Mechanisms & Frameworks" },
    { "id": "w9ANZlBgNG4", "title": "When to Apply Parallelism in Practice" },
    { "id": "2LRqXqOIuJc", "title": "The Java Object-Oriented Image Crawler Case Study (Part 2)" }, 
    { "id": "sxUKTXvR3eI", "title": "The Java Object-Oriented Image Crawler Case Study (Part 1)" }, 
    { "id": "bnUYX-XBvhI", "title": "Walkthrough of Assignment 2A in the Summer of 2023" }, 
    { "id": "mSaEHvilzCU", "title": "Applying Java Functional Programming Features to the ThreadJoinTest Case Study" }, 
    { "id": "YABMUcn9XNU", "title": "The Java Object-Oriented BardWords Case Study (Part 3)" }, 
    { "id": "ZjqqFZgDHug", "title": "Applying Java Functional Programming Features to the ThreadJoinTest Case Study" }, 
    { "id": "WOgndOUl780", "title": "Introduction to Threads & Java Thread Objects" }, 
    { "id": "zTB1O9wL8Go", "title": "The Java Predicate Functional Interface: Case Study ex8" }, 
    { "id": "XAaoAb79Wkk", "title": "Overview of Java Lambda Expressions" }, 
    { "id": "Ce09jblkpco", "title": "Applying Java Lambda Expressions – Case Study ex4" }, 
    { "id": "Rr5QpCZCDQA", "title": "Using Java Lambda Expressions Correctly & Efficiently" }, 
    { "id": "hIK_E4PaSec", "title": "Benefits of Java Lambda Expressions" }, 
    { "id": "vtIeRMIkFgc", "title": "Implementing Closures with Java Lambda Expressions" }, 
    { "id": "F4HFVHBXeu8", "title": "Overview of Java Method References" }, 
    { "id": "MKFUEdVIZ4w", "title": "Applying Java Method References" }, 
    { "id": "MU00WZIl4Ws", "title": "Java Functional Interfaces: Overview" }, 
    { "id": "KTkQSJm1rR8", "title": "The Java Predicate Functional Interface" }, 
    { "id": "FEyOHhAkTE0", "title": "The Java Predicate Functional Interface: Case Study ex8" }, 
    { "id": "qatIWfdeQ9E", "title": "Using ChatGPT to Obtain Shakespeare Quotes in a Java Spring Microservice Case Study App" }, 
    { "id": "HG7Wd0TMF4o", "title": "Common Java Streams Factory Methods" }, 
    { "id": "qBRNPTivuc0", "title": "Walkthrough of Assignment 1B" }, 
    { "id": "jcrmnCLT9o4", "title": "C++ STL Negators" }, 
    { "id": "z8mEBFo2Tog", "title": "Common Java Streams Mistakes (part 4): Sharing Unsynchronized Mutable State in Java Parallel Streams" }, 
    { "id": "5x-_M0KlW-Y", "title": "Implementing a 'Timed Memoizer' with Java `ScheduledExecutorService`, `ConcurrentHashMap`, & `AtomicLong`" }, 
    { "id": "llUIaOYBNRI", "title": "Applying Advanced Completable Futures Features" }, 
    { "id": "v_TIweF3jpc", "title": "Creating and Processing a Large Composite Object with Project Reactor" }, 
    { "id": "oXL2PynsIqw", "title": "Evaluating the Performance and Productivity of Java Fork-Join Pool Programming Models." }, 
    { "id": "JeFxk-Rm8Zc", "title": "Creating and Processing Large Composite Objects with Java Sequential and Parallel Streams" }, 
    { "id": "VX0zVCOslZo", "title": "Microsoft Excel Tutorial - Multiple Criteria Statistical Functions in Excel" }, 
    { "id": "IgAQjlRhFWs", "title": "Web Crawler Via RxJava (Compared with the Completable Futures Framework)" }, 
    { "id": "par5pEuq850", "title": "Web-crawling Image Counter with Java Completable Futures" }, 
    { "id": "1j13PxBe8zg", "title": "Java Semaphore: Mediating Access to Shared Resources" }, 
    { "id": "EJaVFako7Ec", "title": "Java SearchWithParallelStreams Example: Evaluating Pros and Cons" }, 
    { "id": "PVDH6eQHAqc", "title": "Walkthrough of Assignment 2b Frequently Made Mistakes" }
  ],
  "playlists": [
    {
      "title": "CS 253 (Fall 2023): Parallel Functional Programming with Java and Android",
      "videos": [
        { "id": "6CrlFidnKT4", "title": "Walkthrough of Assignment 1 for CS *253 in Fall of 2023" },
        { "id": "KIDb0TbiYPo", "title": "CS 253: Parallel Functional Programming with Java & Android: Overview (Part 1)" },
        { "id": "RlPTo8vYb7I", "title": "CS 253: Parallel Functional Programming with Java & Android: Overview (Part 2)" },
        { "id": "ngR-Esv8vus", "title": "CS 253: Parallel Functional Programming with Java & Android: Overview (Part 3)" },
        { "id": "BTO8DlrIO0c", "title": "CS 253: Parallel Functional Programming with Java & Android: Overview (Part 4)" },
        { "id": "ncO_0f00Jw8", "title": "Overview of Sequential Programming Concepts" },
        { "id": "KGw2JEcWgUk", "title": "Evaluating the Pros & Cons of Sequential Programming" },
        { "id": "FUSE2QkgHMA", "title": "Overview of Concurrent Programming Concepts" },
        { "id": "uCNOYMMs8PQ", "title": "Overview of How Concurrent Programs are Developed in Java (Part 1)" },
        { "id": "9topQIbOS5k", "title": "Overview of How Concurrent Programs are Developed in Java (Part 2)" },
        { "id": "B5hCyYO5T0M", "title": "Overview of Java Concurrency Hazards" },
        { "id": "K1LElXKWSh4", "title": "The History of Concurrency Support in Java" },
        { "id": "lH53yb7ZLAU", "title": "Overview of Parallel Programming Concepts" },
        { "id": "5f-MVwH5KhA", "title": "How Parallel Programs are Developed in Java (Part 1)" },
        { "id": "_J9jgbCj4KU", "title": "How Parallel Programs are Developed in Java (Part 2)" },
        { "id": "eMXFi1ffDa8", "title": "How Parallel Programs are Developed in Java (Part 3)" },
        { "id": "w9ANZlBgNG4", "title": "When to Apply Parallelism in Practice" },
        { "id": "LJO_Nb03Zxg", "title": "The History of Parallelism Support in Java" },
        { "id": "a0A-3PfMND0", "title": "Evaluating Java’s Concurrency & Parallelism Mechanisms & Frameworks" },
        { "id": "-CZUJmaZJWk", "title": "Overview of the Java Fork-Join Framework" },
        { "id": "QrzlGA8710w", "title": "The Java ForkJoinPool Class" },
        { "id": "kc3BxVSXKO4", "title": "The Java ForkJoinTask Class" },
        { "id": "tXrrehxQ9Ew", "title": "Subclasses of the Java ForkJoinTask Class" },
        { "id": "1F5sdv6SCag", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1 in CS 253" },
        { "id": "C9sWlypk5Ek", "title": "Key Methods in Java ForkJoinPool" },
        { "id": "R361BaZSKqU", "title": "Key Methods in the Java ForkJoinTask Superclass" },
        { "id": "JJF5EDaRBjo", "title": "Key Methods in the Java RecursiveAction & RecursiveTask Subclasses" },
        { "id": "sK7z1Hg68ko", "title": "Java Fork-Join Framework Internals: Worker Threads" },
        { "id": "6SU1EEOeAGA", "title": "Java Fork-Join Framework Internals: Work Stealing" },
        { "id": "3zVomqhCsmY", "title": "Maximizing Processor Core Utilization with the Java Common Fork-Join Pool" },
        { "id": "2P5CGYSXPKg", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1 in CS 253" },
        { "id": "wQsRA7ojxOI", "title": "Overview of the Java Fork-Join Framework's ManagedBlocker Interface" },
        { "id": "k7HLTWpmS4g", "title": "Applying the Java Fork-Join Framework's ManagedBlocker Interface" },
        { "id": "gLMHqApL05M", "title": "Encapsulating the Java Fork-Join Framework's ManagedBlocker Interface" },
        { "id": "rUsIrlOgamU", "title": "Summary of the Java (Common) Fork-Join Pool Benefits" },
        { "id": "FrfRBPYH-Ro", "title": "The FileCount Case Study: Overview" },
        { "id": "17_TnEbUsN4", "title": "The FileCount Case Study: Main Driver Program" },
        { "id": "wTAINEha2WE", "title": "The FileCount Case Study: `FileCounterForkJoinTask`" },
        { "id": "BMhhMOzGSkM", "title": "The FileCount Case Study: `FileCounterSequentialStreamTask`" },
        { "id": "F_c1jpxbnJo", "title": "The FileCount Case Study: `FileCounterParallelStream`" },
        { "id": "Cr-NieP4Sz8", "title": "The FileCount Case Study: Performance & Evaluation" },
        { "id": "bRimj7DM02U", "title": "Assignment 2 Walkthrough for CS 253 in Spring 2023" },
        { "id": "qY4A-5sffoc", "title": "Overview of Generative Artificial Intelligence & Augmented Intelligence (AI+)" },
        { "id": "xLV11p7ARWU", "title": "Applying AI+ to Enhance Lecture Material and Quiz/Exam Assessments in Vandy CS Courses" },
        { "id": "a0wtQRwkRl8", "title": "Applying AI+ to Review Programming Assignment Submissions in Vandy CS Courses" },
        { "id": "ff729vklWJo", "title": "Very Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2 in CS 253" },
        { "id": "3cjRO7C3B_c", "title": "Another Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2 in CS 253" },
        { "id": "g5_D2sHqMvg", "title": "Overview of Java Streams" },
        { "id": "AFojH0a5v0E", "title": "Overview of Java Streams Phases" },
        { "id": "vULbNu_f7pI", "title": "Understanding Java Streams Common Creation Operations" },
        { "id": "WSdPxFH8Nq8", "title": "Understanding Java Streams Common Aggregate Operations" },
        { "id": "zNfjszULxsI", "title": "Visualizing Java Streams in Action" },
        { "id": "_1HahTuMl5o", "title": "Comparing Java Sequential Streams with Java Parallel Streams." },
        { "id": "m8uw57qNQ6s", "title": "Common Programming Hazards with Java Parallel Streams" },
        { "id": "6zG4ZKVy9lM", "title": "Recognizing the Benefits of Java Streams" },
        { "id": "ME-9kB7OAVc", "title": "The ex45 Case Study (Part 1): Overview and Utility Classes" },
        { "id": "L1mOXgjKBt0", "title": "The ex45 Case Study (Part 2): The Driver Class and Runtime Behavior" },
        { "id": "eUtrk-Gt0sc", "title": "Contrasting Java I/O Streams with Java Streams" },
        { "id": "-ar6N7W33pk", "title": "Walkthrough of Frequently Made Mistakes for CS 253 in Fall 2023" },
        { "id": "1n07VHueC7I", "title": "Contrasting Java Streams with Java Collections" },
        { "id": "4at4BjxJOFY", "title": "Overview of the SimpleSearchStream Program" },
        { "id": "-k9QVgGwpmk", "title": "Visualizing the WorkSearcher.findWords() Method" },
        { "id": "4617SFxYWK8", "title": "Common Java Streams Factory Methods" },
        { "id": "Y7DBz-wOOh4", "title": "Understanding Java Streams Overview of Aggregate Operations" },
        { "id": "NpJGtMdkeFE", "title": "Understanding Java Streams Short-circuit Aggregate Operations" },
        { "id": "tb-1K3AHuUg", "title": "Java Streams Intermediate Operations map() and mapToInt()" },
        { "id": "KzvEvpjbJr8", "title": "Java Streams Intermediate Operations filter() and flatMap()" },
        { "id": "BVniR4emMkU", "title": "Java Streams Intermediate Operations dropWhile() and takeWhile()" },
        { "id": "JdffiF33BRw", "title": "Overview of Java Streams Terminal Operations" },
        { "id": "waFLfRKywMQ", "title": "The Java Streams `forEach()` & forEachOrdered() Terminal Operations" },
        { "id": "W-sBjArbvKs", "title": "The Java Streams `collect()` Terminal Operations (Part 1)" },
        { "id": "APnQ7tQrp0A", "title": "The Java Streams `collect()` Terminal Operations (Part 2)" },
        { "id": "1Gn3YNGmFrQ", "title": "The Java Streams `collect()` Terminal Operations (Part 3)" },
        { "id": "x84g55JuF6w", "title": "The Java Streams `reduce()` Terminal Operations (Part 1)" },
        { "id": "d5wd8UY8hXg", "title": "The Java Streams `reduce()` Terminal Operations (Part 2)" },
        { "id": "QYZLm3DCaRc", "title": "Walkthrough of Assignment 3a for CS 253 in the Fall of 2023" },
        { "id": "CxmMtnMWwd0", "title": "Java Streams Intermediate Operation mapMulti()" },
        { "id": "6YyPwtu41lM", "title": "Java Parallel Streams Internals: Overcoming Limitations with `flatMap()` in Parallel Streams" },
        { "id": "AezEnxPfD_M", "title": "Optimizing Java Parallel Streams: Overcoming `flatMap()` Limitations (Part 1)" },
        { "id": "nzERZoR_SdY", "title": "Optimizing Java Parallel Streams: Overcoming `flatMap()` Limitations (Part 2)" },
        { "id": "OwGh-uJnzb8", "title": "Optimizing Java Parallel Streams: Overcoming `flatMap()` Limitations (Part 3)" },
        { "id": "C8kFESM93L0", "title": "Contrasting the Java Streams `reduce()` and `collect()` Terminal Operations" },
        { "id": "8ECNpazrSLY", "title": "Visualizing and Implementing `WordSearcher.printResults()`" },
        { "id": "E12807-J_N8", "title": "Visualizing and Implementing `WordSearcher.printSuffixSlice()`" },
        { "id": "wcwu1VekEaY", "title": "Java Streams Internals: Splitting and Combining" },
        { "id": "ZeWI6ucVz0A", "title": "Java Stream Internals: Construction" },
        { "id": "w_wxo0Uo6Lw", "title": "Java Streams Internals: Execution" },
        { "id": "LlLR5G7LKVQ", "title": "Understand Java Stream Spliterators" },
        { "id": "nip0HVhFZm4", "title": "Apply Java Streams Spliterators" },
        { "id": "IYfJpXfwLfw", "title": "Understand Java Streams Non-Concurrent Collectors" },
        { "id": "5DmD9loYuuE", "title": "Understanding the Java Streams Non-Concurrent Collector API" },
        { "id": "KMxUYZaZkYs", "title": "How Pre-Defined Non-Concurrent Collectors are Implemented" },
        { "id": "25dryKW4Z0c", "title": "How to Implement Custom Non-Concurrent Collectors" },
        { "id": "zLUuviLemQA", "title": "An Overview of Parallelism and Java Parallel Streams" },
        { "id": "cjfOpgC8_Uc", "title": "How Java Parallel Streams Work \"Under the Hood\"" },
        { "id": "SYJ7JEX0c2w", "title": "Avoiding Programming Hazards with Java Parallel Streams" },
        { "id": "hlMzsYG0mjE", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 3A in CS 253" },
        { "id": "emGqyvKLRog", "title": "Walkthrough of Assignment 3B for CS 253 in the Fall of 2023" },
        { "id": "mX9yC3HPBzk", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3A for CS 253 in the Fall of 2023" },
        { "id": "C9WZ2XPsphs", "title": "Java Parallel Streams Internals: Introduction" },
        { "id": "ss9kY7r2ASg", "title": "Java Parallel Streams Internals: Splitting, Combining, and Pooling" },
        { "id": "tK3f0yxEnAE", "title": "Java Parallel Streams Internals: Order of Processing Overview" },
        { "id": "NQd_tdNcX-M", "title": "Java Parallel Streams Internals: Order of Results Overview" },
        { "id": "U1id84ZZTYM", "title": "Java Parallel Streams Internals: Order of Results for Aggregate Operations" },
        { "id": "N7GYZI-6hk8", "title": "Java Parallel Streams Internals: Order of Results for Collections" },
        { "id": "18TzQM6Yu9s", "title": "Applying ChatGPT to Analyze the Performance of Java Streams with mapMulti() vs. map()/reduce()" },
        { "id": "7feA5FhLfw0", "title": "Java Parallel Streams Internals: Partitioning" },
        { "id": "ukFerCRlSDI", "title": "Java Parallel Streams Internals: Demo'ing Spliterator Performance" },
        { "id": "ta_dZ9rrJJA", "title": "Java Parallel Streams Internals: Parallel Processing with the Common Fork-Join Pool" },
        { "id": "lq54mb5Zj7A", "title": "Java Parallel Stream Internals: Mapping Onto the Common Fork-Join Pool" },
        { "id": "nt1-QsljdRQ", "title": "Assuring the Future of Software Engineering & AI Engineering" },
        { "id": "iix6niTYq1w", "title": "Java Parallel Streams Internals: Configuring the Common Fork-Join Pool" },
        { "id": "a_yo_jL-1Ck", "title": "Java Parallel Streams Internals: Demo'ing How to Configure the Common Fork-Join Pool" },
        { "id": "yn2ulTUrGHM", "title": "Java Parallel Streams Internals: Combining Results Part 1" },
        { "id": "vlQfQCjJ_z4", "title": "Java Parallel Streams Internals: Combining Results Part 2" },
        { "id": "Z94ubsCVymo", "title": "Automating Java Code Refactoring with ChatGPT 4:  Decoupling Timing Logic from Business Logic" },
        { "id": "09h9t3ClLlc", "title": "Java Parallel Streams Internals: Non-Concurrent & Concurrent Collectors (Part 1)" },
        { "id": "uN45ARdNPm0", "title": "Java Parallel Streams Internals: Non-Concurrent & Concurrent Collectors (Part 2)" },
        { "id": "sQOt-F5aXsM", "title": "Java Parallel Streams Internals: Demo'ing Collector Performance (Part 1)" },
        { "id": "Mtm4u4OEjvE", "title": "Java Parallel Streams Internals: Demo'ing Collector Performance (Part 2)" },
        { "id": "9SPaU4xXe4E", "title": "Java Parallel Streams Internals: Demo'ing Collector Performance (Part 3)" },
        { "id": "3L7lQ9qmxTQ", "title": "Preliminary of Frequently Made Mistakes for Assignment 3B in the Fall of 2023" },
        { "id": "oTKMbd7FKgg", "title": "When to Use Java Parallel Streams" },
        { "id": "uEubBgaLcXY", "title": "When Not to Use Java Parallel Streams" },
        { "id": "m4iqfs_n0-0", "title": "Evaluating the Benefits of Java Parallel Streams" },
        { "id": "i-IODm3cXQM", "title": "Evaluating the Limitations of Java Parallel Streams" },
        { "id": "ET30U1aLoww", "title": "Overview of Reactive Programming Principles" },
        { "id": "j1r58wNvFNA", "title": "The Structure and Functionality of the Java Completable Futures Framework" },
        { "id": "3_00gu-megE", "title": "Mapping Java Completable Future Features Onto Reactive Programming Principles" },
        { "id": "WR6Ofe9NhQM", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3B in CS 253 in Fall 2023" },
        { "id": "2sCVtXNgaTo", "title": "Walkthrough of Assignment 4 for CS 253 in the Fall of 2023" },
        { "id": "etcEw62HEg4", "title": "Overview of Synchrony and Synchronous Operations" },
        { "id": "ejmsuL3GOmo", "title": "Overview of Asynchrony and Asynchronous Operations" },
        { "id": "l0ZEhn_lj3c", "title": "Overview of Java Futures (Parts 1 and 2)" },
        { "id": "05fgxhat4yU", "title": "Visualizing and Applying Java Futures" },
        { "id": "nq0VsixgZ74", "title": "Evaluating the Pros and Cons of Java Futures" },
        { "id": "2lPis6nYdEI", "title": "How Java Completable Futures Overcome Limitations of Java Futures" },
        { "id": "p8RWziyYUbk", "title": "Understanding Method Groupings in the Java Completable Futures API (Part 1)" },
        { "id": "8YZqjo5vJEc", "title": "Understanding Method Groupings in the Java Completable Futures API (Part 2)" },
        { "id": "4mg4MJQRLPw", "title": "Overview of Basic Java `CompletableFuture` Features" },
        { "id": "YOEMmYZiHj4", "title": "Applying Basic Java `CompletableFuture` Features" },
        { "id": "hM5t4CZAGlU", "title": "Advanced Java `CompletableFuture` Features: Introduction Factory Methods" },
        { "id": "ruPTD70TxkU", "title": "Advanced Java `CompletableFuture` Features: Applying Factory Methods" },
        { "id": "nKFnxEXvPFw", "title": "Advanced Java `CompletableFuture` Features: Factory Method Internals" },
        { "id": "zrF2Bjrh_i0", "title": "Advanced Java `CompletableFuture` Features: Introducing Completion Stage Methods (Part 1)" },
        { "id": "9ux1zjojUPE", "title": "Advanced Java `CompletableFuture` Features: Introducing Completion Stage Methods (Part 2)" },
        { "id": "B9SyUmw1o-E", "title": "Advanced Java `CompletableFuture` Features: Grouping Completion Stage Methods" },
        { "id": "4b0gT7WAcuk", "title": "Advanced Java `CompletableFuture` Features: Single Stage Completion Methods (Part 1)" },
        { "id": "3lUsWCfN2Os", "title": "Advanced Java `CompletableFuture` Features: Single Stage Completion Methods (Part 2)" },
        { "id": "l2lxiIz3-AM", "title": "Advanced Java `CompletableFuture` Features: Two Stage Completion Methods (Part 1)" },
        { "id": "Se2RT1_82bM", "title": "Advanced Java `CompletableFuture` Features: Two Stage Completion Methods (Part 2)" },
        { "id": "zXAVqJH-ipM", "title": "Advanced Java `CompletableFuture` Features: Applying Completion Stage Methods (Part 1)" },
        { "id": "a3G_Cedoxts", "title": "Advanced Java `CompletableFuture` Features: Applying Completion Stage Methods (Part 2)" },
        { "id": "RvU2iBnIq0I", "title": "Advanced Java `CompletableFuture` Features: Handling Runtime Exceptions (Part 1)" },
        { "id": "GV3oUIwFR2Y", "title": "Advanced Java `CompletableFuture` Features: Handling Runtime Exceptions (Part 2)" },
        { "id": "mS179mR3Vdc", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 4" },
        { "id": "eh9qzr1-ayM", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 4 (Part 2)" },
        { "id": "LzxfiA8Ke8Q", "title": "Advanced Java Completable Future Features: Arbitrary-Arity Methods" },
        { "id": "6sQ145nNooc", "title": "Advanced Java `CompletableFuture` Features: Designing the FuturesCollector Class" },
        { "id": "-OTDowpgHmY", "title": "Advanced Java `CompletableFuture` Features: Implementing the FuturesCollector Class" },
        { "id": "qfnR_ZaJud4", "title": "Evaluating the Pros of the Java Completable Futures Framework" },
        { "id": "ZXQgvK0H_iQ", "title": "Evaluating the Cons of the Java Completable Futures Framework" },
        { "id": "Q19expJuqYE", "title": "Walkthrough of Frequently Made Mistakes for Assignment 4 in Fall of 2023" },
        { "id": "7dWMygg5rrs", "title": "Walkthrough of Frequently Made Mistakes for Assignment 4 in Fall of 2023" },
        { "id": "HD8Bhoo2e9Y", "title": "Overview of the Java Reactive Streams API" },
        { "id": "TXooBO5T9XI", "title": "Overview of Popular Implementations of the Java Reactive Streams API" },
        { "id": "gJVSm4Au-Os", "title": "Mapping Java Reactive Streams Onto Reactive Programming Principles" },
        { "id": "R_X5anSpO7s", "title": "Evaluating Java Programming Paradigms" },
        { "id": "kab3SOBw4Hk", "title": "Overview of Key Classes in the RxJava API" },
        { "id": "u8e4j7y7gYs", "title": "Overview of the BigFraction Case Studies" },
        { "id": "RJ7o6wh5yPI", "title": "Overview of the RxJava AsyncTaskBarrier Framework" },
        { "id": "jDc5KNbzBBE", "title": "Key Factory Method Operators in the Observable Class (Part 1)" },
        { "id": "t8QxvKJG_jg", "title": "Key Transforming Operators in the Observable Class (Part 1)" },
        { "id": "ni-wJ0N7QUw", "title": "Key Action Operators in the Observable Class (Part 1)" },
        { "id": "vQPtjU9Tc8o", "title": "Key Combining Operators in the Observable Class (Part 1)" },
        { "id": "nVwErzOT9UY", "title": "Walkthrough of Assignment 5 for CS 253 in the Fall of 2023" },
        { "id": "OLvVD2FgQeM", "title": "A Potpourri of RxJava Operators for the Observable, Flowable, ParallelFlowable, and Single Classes" },
        { "id": "YvieVDWntoo", "title": "Another Potpourri of RxJava Operators for the Observable Class" },
        { "id": "4pc9g1X6OUk", "title": "Applying Key Operators in the Observable Class: Case Study ex3 (Part 1)" },
        { "id": "5_RREggJq1k", "title": "Preliminary Walkthrough of Assignment 5 for CS 253" },
        { "id": "WLMEIrvuJQ4", "title": "Implementing the AsyncTaskBarrier Framework Using RxJava (Part 1)" },
        { "id": "IOuMfuus1PY", "title": "Implementing the AsyncTaskBarrier Framework Using RxJava (Part 2)" },
        { "id": "jbYLc9iE7g4", "title": "Overview of the Flowable Class" },
        { "id": "U5BpVlM8YcE", "title": "Key Factory Method Operators in the Flowable Class (Part 1)" },
        { "id": "0DV0AR1HUj0", "title": "Applying Key Operators in the Flowable Class: Case Study ex1" },
        { "id": "qANiKXw73BI", "title": "Key Factory Method Operators in the Flowable Class (Part 2)" },
        { "id": "tglGCy0gfBE", "title": "Frequently Made Mistakes for Assignment 5 in CS 253" },
        { "id": "L_47XJAdHeM", "title": "Applying Key Operators in the Flowable Class: Case Study ex2" },
        { "id": "LttwwXxlt3w", "title": "Overview of the Java Parallel ImageStreamGang Case Study" },
        { "id": "pzd0L-Tcmto", "title": "Walkthrough of the ImageStreamGang Case Study Part 1: Test Driver Program and Performance Comparison" },
        { "id": "DpHDyPlikDk", "title": "Walkthrough of the ImageStreamGang Case Study Part 2: the Sequential and Parallel Streams Strategies" },
        { "id": "JTSwUkqsFhI", "title": "Walkthrough of the ImageStreamGang Case Study Part 3: the Completable Futures Strategy" },
        { "id": "cCRYAEuqB5s", "title": "Walkthrough of the ImageStreamGang Case Study Part 4: the RxJava Strategy" }
      ]
    }, {
      "title": "CS 5254 (2023) Concurrent Object-Oriented and Functional Programming with Java and Android",
      "videos": [
        { "id": "3TBXeg0eZow", "title": "Concurrent Object-Oriented and Functional Programming with Java & Android: Course Overview (Part 1)" },
        { "id": "Jarq2PZjVoQ", "title": "Concurrent Object-Oriented and Functional Programming with Java & Android: Course Overview (Part 2)" },
        { "id": "xaVY47GLIow", "title": "Concurrent Object-Oriented and Functional Programming with Java & Android: Course Overview (Part 3)" },
        { "id": "z9x1YzFFiro", "title": "Concurrent Object-Oriented and Functional Programming with Java & Android: Course Overview (Part 4)" },
        { "id": "vZBTe4GAH1I", "title": "Walkthrough of Assignment 1A in the Summer of 2023" },
        { "id": "XAaoAb79Wkk", "title": "Overview of Java Lambda Expressions" },
        { "id": "Rr5QpCZCDQA", "title": "Using Java Lambda Expressions Correctly & Efficiently" },
        { "id": "Ce09jblkpco", "title": "Applying Java Lambda Expressions – Case Study ex4" },
        { "id": "hIK_E4PaSec", "title": "Benefits of Java Lambda Expressions" },
        { "id": "qYwDOVCRDAk", "title": "Implementing Closures with Java Lambda Expressions" },
        { "id": "E17Me0RDfz0", "title": "Applying Closures & Java Lambda Expressions in Case Study ex6" },
        { "id": "-Zz6WPJyyd4", "title": "Overview of Java Method References" },
        { "id": "MKFUEdVIZ4w", "title": "Applying Java Method References" },
        { "id": "MU00WZIl4Ws", "title": "Java Functional Interfaces: Overview" },
        { "id": "KTkQSJm1rR8", "title": "The Java Predicate Functional Interface" },
        { "id": "zTB1O9wL8Go", "title": "The Java Predicate Functional Interface: Case Study ex8" },
        { "id": "9EU0YDuusdg", "title": "The Java Function Functional Interface" },
        { "id": "-LVn0hs2EQ0", "title": "The Java Function Functional Interface: Case Study ex9" },
        { "id": "Q6wqtfac3sw", "title": "The Java BiFunction Functional Interface" },
        { "id": "D788IzVUv5s", "title": "The Java BiFunction Functional Interface: Case Study ex11" },
        { "id": "ZB3X7c-gx9M", "title": "The Java Supplier Functional Interface: Optional Usage" },
        { "id": "noCIs25IWio", "title": "The Java Supplier Functional Interface: Case Study ex12" },
        { "id": "ufCgRiPObeQ", "title": "The Java Supplier Functional Interface: Constructor References" },
        { "id": "tjo5ZVVUFdk", "title": "Java Supplier Functional Interface: Case Study ex13" },
        { "id": "D4GDmM_ojTI", "title": "The Java Consumer Functional Interface" },
        { "id": "I1q4rtrRVhw", "title": "Applying the Java Consumer & Function Functional Interfaces" },
        { "id": "PFmcSqsXTic", "title": "The Java Function & Consumer Functional Interfaces: Case Study ex14" },
        { "id": "g1VoatkPT6E", "title": "Other Properties of Java Functional Interfaces" },
        { "id": "aU9s6_hZhTE", "title": "Summary of Frequently Made Mistakes for Assignment 1A in CS 5254" },
        { "id": "Chs1gVl5bOA", "title": "Walkthrough of Assignment 1B for CS 5254 in Summer 2023" },
        { "id": "EELPbJbOe4Q", "title": "Java Platform Threads vs. Virtual Threads (Part 1)" },
        { "id": "5O3VBA9_9rA", "title": "Java Platform Threads vs. Virtual Threads (Part 2)" },
        { "id": "PNhjCKrgkAY", "title": "Applying Java Platform Threads & Virtual Threads: Case Study ex15" },
        { "id": "OHWKEzFOPeg", "title": "Key Methods in a Java Thread" },
        { "id": "mSaEHvilzCU", "title": "Applying Java Functional Programming Features to the ThreadJoinTest Case Study" },
        { "id": "CsjpB1b5nLc", "title": "Applying Java Functional Programming Features & Threads in ThreadJoinTest" },
        { "id": "Srg46cCRSFk", "title": "Applying Java Functional Programming Features: the ThreadJoinTest Case Study" },
        { "id": "ZPixUiFYSS8", "title": "Evaluating the ThreadJoinTest Case Study" },
        { "id": "MZqaYa2gK4Q", "title": "Motivating the Need for Java Futures" },
        { "id": "2HclRRCTzgM", "title": "Overview of the Future Lifecycle & Common Human Known Uses" },
        { "id": "fQkgJlDfb0A", "title": "Overview of Java Futures" },
        { "id": "A70FraWLCxM", "title": "Overview of Java FutureTask" },
        { "id": "6dExYdnSScc", "title": "Applying Java Futures in Case Study ex16" },
        { "id": "XMDIUEsJ4hs", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1B for CS 5254 in Summer 2023" },
        { "id": "bnUYX-XBvhI", "title": "Walkthrough of Assignment 2A in the Summer of 2023" },
        { "id": "3vsm2wBkYH8", "title": "Implementing the Singleton Pattern in Java Multi-threaded Programs - Case Study ex28 (Part 1)" },
        { "id": "yrJmAo1mliU", "title": "Implementing the Singleton Pattern in Java Multi-threaded Programs - Case Study ex28 (Part 2)" },
        { "id": "YD3OrQY0Ro8", "title": "Implementing the Singleton Pattern in Java Multi-threaded Programs - Case Study ex28 (Part 3)" },
        { "id": "Ugqa7HBaVvI", "title": "Implementing the Singleton Pattern in Java Multi-threaded Programs - Case Study ex28 (Part 4)" },
        { "id": "ZfIUY5yVnTA", "title": "Applying the Java Volatile Type Qualifier to Coordinate Multiple Threads in a Concurrent Program" },
        { "id": "j0EIXGvKOJY", "title": "Walkthrough of Frequently Made Mistakes for Assignment 2a in CS 5254 Summer 2023" },
        { "id": "77pR887yUoM", "title": "Walkthrough of Assignment 2A for CS 5254 in Summer of 2023" },
        { "id": "qWrBgwFqKi0", "title": "Implementing an \"AtomicLong\" Capability with Java Synchronizers - Case Study ex39 (Part 1)" },
        { "id": "9TTkANIp7Gs", "title": "Implementing an \"AtomicLong\" Capability with Java Synchronizers - Case Study ex39 (Part 2)" },
        { "id": "bW7Pm0MOKaM", "title": "Implementing an \"AtomicLong\" Capability with Java Synchronizers - Case Study ex39 (Part 3)" },
        { "id": "BgVKz5isI8c", "title": "Implementing an \"AtomicLong\" Capability with Java Synchronizers - Case Study ex39 (Part 4)" },
        { "id": "JNdje6oKoXY", "title": "Applying Reentrant & Non-Reentrant Java Locks to Object-Oriented Frameworks & Applications (Part 1)" },
        { "id": "35ssbkB5COE", "title": "Applying Reentrant & Non-Reentrant Java Locks to Object-Oriented Frameworks & Applications (Part 2)" },
        { "id": "S5M3-xVsP-s", "title": "Applying Reentrant & Non-Reentrant Java Locks to Object-Oriented Frameworks & Applications (Part 3)" },
        { "id": "MGSjLCc1-LE", "title": "Overview of the ImageTaskGang Application" },
        { "id": "hyBK9zw0K0o", "title": "Structure & Dynamics of the ImageTaskGang Application" },
        { "id": "XOGnImAh1yM", "title": "Pattern-Oriented Software Architecture of the ImageTaskGang Application" },
        { "id": "IHHBLlHxRgc", "title": "Analyzing the TaskGang Class" },
        { "id": "_JSxle6vkwY", "title": "Analyzing the ImageTaskGang Class" },
        { "id": "iP-tNtdbWf4", "title": "Analyzing the Filter Class Hierarchy" },
        { "id": "eLkqjrUILbo", "title": "Wrapping Up the ImageTaskGang Application Analysis" },
        { "id": "cpkmBEEFKXo", "title": "Walkthrough of Frequently Made Mistakes for Assignment 2B in CS 5254" },
        { "id": "0I7bB5roI_s", "title": "Walkthrough for Assignment 3A for CS 5254" },
        { "id": "FmbDvkx8-HQ", "title": "Overview of the SearchTaskGang Case Study" },
        { "id": "xz3Fdxua35o", "title": "Overview of the TaskGang Framework" },
        { "id": "DNw4t-etUrs", "title": "Overview of the SearchTaskGangCommon Class" },
        { "id": "wtMzn_Q6-5c", "title": "Overview of the OneShotThreadPerTask Class" },
        { "id": "533pBRZSEHo", "title": "Overview of the OneShotExecutorService Class" },
        { "id": "IkitZ9t9eU0", "title": "Overview of the OneShotExecutorServiceFuture Class" },
        { "id": "B41Rfjs0B28", "title": "Overview of the OneShotExecutorCompletionService Class" },
        { "id": "8uuf2I0HBQ4", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3A in CS 5254" },
        { "id": "H6YQ16g_9AY", "title": "Walkthrough of Assignment 3B for CS 5254" },
        { "id": "RNnX1jwFVQk", "title": "Overview of the BarrierTaskGang Case Study" },
        { "id": "e1IvtA5zFBw", "title": "Overview of the SearchTaskGangCommon Class" },
        { "id": "mzigcnywj8s", "title": "Overview of the OneShotSearchWithCountDownLatch Class" },
        { "id": "NAGLJ6QuvKI", "title": "Overview of the SearchTaskGangCommonCyclic Class" },
        { "id": "AMg9QaQNAA0", "title": "Overview of the CyclicSearchWithCyclicBarrier Class" },
        { "id": "V_rECqY4Q-c", "title": "Overview of the CyclicSearchWithPhaser Class" },
        { "id": "2GNNY91Eisw", "title": "Wrapping Up the BarrierTaskGang Case Study Analysis" },
        { "id": "U0VuH037AD4", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3B" },
        { "id": "1mp2gLZe9cA", "title": "The Java StampedLock: Case Study ex47 (part 1)" },
        { "id": "8Iu8dzRL8lA", "title": "The Java StampedLock: Case Study ex47 (Part 2)" },
        { "id": "YAsarlXHHus", "title": "The Java StampedLock: Case Study ex47 (Part 3)" },
        { "id": "pRd4HAjRdzs", "title": "Walkthrough of Assignment 4 for CS 5254" },
        { "id": "ohk_B10pWUw", "title": "Walkthrough of Frequently Made Mistakes for Assignment 4" }
      ]
    }, {
      "title": "CS 891 (2023) Scalable Microservices",
      "videos": [
        { "id": "ljzoe7rtQCs", "title": "Walkthrough of Assignment 1A for CS 891" },
        { "id": "1X1lB4W2ubw", "title": "CS 891: Scalable Microservices: Overview (Part 1)" },
        { "id": "Vamjh4gtPZE", "title": "CS 891: Scalable Microservices: Overview (Part 2)" },
        { "id": "jpM3yJV0H1c", "title": "CS 891: Scalable Microservices: Overview (Part 3)" },
        { "id": "y6uStZpNtGA", "title": "CS 891: Scalable Microservices: Overview (Part 4)" },
        { "id": "TUK-ZAcH5hs", "title": "Overview of Spring and Sprint Boot" },
        { "id": "mG5mnXSYGr8", "title": "Overview of Spring Boot Software Patterns" },
        { "id": "V9PQtm1A_GU", "title": "Overview of Spring Boot's Internal Architecture" },
        { "id": "_PjgbpmeXck", "title": "Overview of WebMVC" },
        { "id": "sU4uDL25POM", "title": "The BerraQuotes App Case Study: Overview" },
        { "id": "Zc1GPrcJug8", "title": "The BerraQuotes App Case Study: Server Structure & Functionality" },
        { "id": "_GWhWIim6J8", "title": "The BerraQuotes App Case Study: Implementing the Server Components" },
        { "id": "51bWjh44GjU", "title": "The BerraQuotes App Case Study: Implementing the Client" },
        { "id": "nTiSRB4RDbA", "title": "The BerraQuotes App Case Study: Test Driver Implementation" },
        { "id": "rFPdFo6_n20", "title": "Java Platform Threads vs. Virtual Threads (Part 1)" },
        { "id": "tqJPhZgv55U", "title": "Preliminary Walkthrough of Assignment 1A Frequently Made Mistakes" },
        { "id": "D0l5jujUVkk", "title": "Java Platform Threads vs. Virtual Threads (Part 2)" },
        { "id": "S1BOQ-QpND8", "title": "Applying Java Platform Threads & Virtual Threads: Case Study ex1" },
        { "id": "NoZZs6Z9dlo", "title": "Overview of Java Structured Concurrency" },
        { "id": "ZrviHkxkr-Y", "title": "Programming with Java Structured Concurrency" },
        { "id": "BDP0Y-Dm0XA", "title": "Programming with Java TaskPerThreadExecutor" },
        { "id": "sXIpgHtp1hs", "title": "Applying Java Structured Concurrency: Case Study ex2" },
        { "id": "Lt-G8phxXwo", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1a in CS 891" },
        { "id": "lb7xZxLriuM", "title": "Walkthrough of Assignment 1B for CS 891" },
        { "id": "DqpThEbgjYA", "title": "Programming with Java Regular Expressions to Search the Works of Shakespeare" },
        { "id": "Cfhoah8d6_Q", "title": "Concatenating a List of String Objects Together Via Java Streams" },
        { "id": "Nug3sjj2HL4", "title": "Programming with Java StructuredTaskScope" },
        { "id": "b494I08RRNg", "title": "Applying Java Structured Concurrency: Case Study ex3" },
        { "id": "UKf7EPxTw0A", "title": "Applying Java Structured Concurrency: Case Study ex4 (Part 1a)" },
        { "id": "fFOxE6jKQ64", "title": "Applying Java Structured Concurrency: Case Study ex4 (Part 1b)" },
        { "id": "xGkOYmxX3wU", "title": "Applying Java Structured Concurrency: Case Study ex4 (Part 2a)" },
        { "id": "zOU78AwKqGk", "title": "Applying Java Structured Concurrency: Case Study ex4 (Part 2b)" },
        { "id": "1bWxJwO1p2o", "title": "Applying Java Structured Concurrency: Case Study ex4 (Part 3)" },
        { "id": "Q_BOi5u528Y", "title": "Evaluating Java Structured Concurrency" },
        { "id": "zpMXI0I9J-w", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1B" },
        { "id": "BEvWRjIdFnE", "title": "Walkthrough of the Java StructuredTaskScope Code" },
        { "id": "5n8FZK0h_XA", "title": "Walkthrough of the Java ShutdownOnSuccess Code" },
        { "id": "gCANEhX7Zyk", "title": "Walkthrough of the Java ShutdownOnFailure Code" },
        { "id": "g3IZvCw5CCs", "title": "Implementing a Custom StructuredTaskScope" },
        { "id": "C5uJGg2iJX4", "title": "Applying Java Structured Concurrency: Case Study ex5" },
        { "id": "3x6h3VV760k", "title": "The PrimeCheck App Case Study: Overview" },
        { "id": "K4dxLxn5-vI", "title": "The PrimeCheck App Case Study: Server Structure & Functionality" },
        { "id": "BevTRQDFrFA", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1B in CS 891" },
        { "id": "vyiTDW2bY7I", "title": "Walkthrough of Assignment 1C" },
        { "id": "sXGIVrEiorw", "title": "The PrimeCheck App Case Study: Implementing Server Components" },
        { "id": "RmJ3MWC6X6Y", "title": "The PrimeCheck App Case Study: Client Structure & Functionality" },
        { "id": "C8ZqjeGZMuc", "title": "The PrimeCheck App Case Study: Implementing the Client" },
        { "id": "k5h0SqQUZ18", "title": "The PrimeCheck App Case Study: Test Driver Implementation & Performance" },
        { "id": "D9H-AZAc8nE", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1C" },
        { "id": "iLrYKr1xidU", "title": "Enhancing Java Completable Futures Framework Extensibility" },
        { "id": "5ZZR4QGWkUE", "title": "The PrimeCheck App Case Study: Implementing Server Components (Part 2)" },
        { "id": "nUHszFdM6iI", "title": "The BerraQuotes App Case Study: Overview" },
        { "id": "8qDrZ97RXOc", "title": "The BerraQuotes App Case Study: Server Structure & Functionality" },
        { "id": "PgYEhran0TU", "title": "The BerraQuotes App Case Study: Implementing the Server Components" },
        { "id": "p7Sz_88dAN4", "title": "The MathServices App Case Study: Overview" },
        { "id": "bkTA97e9FHY", "title": "The MathServices App Case Study: Primality Microservice Structure & Functionality" },
        { "id": "xSz6z-4zQ4o", "title": "The MathServices App Case Study: Implementing the Primality Microservice" },
        { "id": "Xtokz8Z8e50", "title": "The MathServices App Case Study: GCD Microservice Structure & Functionality" },
        { "id": "bloEvo3Jwuw", "title": "The MathServices App Case Study: Implementing the GCD Microservice" },
        { "id": "5fkENnrkAI8", "title": "The MathServices App Case Study: Client Structure & Functionality" },
        { "id": "786-4oIJ6zU", "title": "The MathServices App Case Study: Implementing Client-related Classes" },
        { "id": "mk70WsENqGU", "title": "The MathServices App Case Study: Test Driver Implementation" },
        { "id": "65VmRv5XztU", "title": "Preview of Frequently Made Mistakes for Assignment 1C in CS 891" },
        { "id": "6yx-wKkbYPk", "title": "The QuoteServices App Case Study: Overview" },
        { "id": "t_Dgf1l_s9k", "title": "The QuoteServices App Case Study: Eureka Microservice Structure & Functionality" },
        { "id": "-XiyQXTJXbo", "title": "The QuoteServices App Case Study: Overview of the API Gateway Pattern" },
        { "id": "HkY9cjHTukw", "title": "The QuoteServices App Case Study: Gateway Microservice Structure & Functionality" },
        { "id": "zfj9YZuB0Cw", "title": "The QuoteServices App Case Study: Implementing Eureka & Gateway Microservices" },
        { "id": "Eb1JXWqCbfI", "title": "The QuoteServices App Case Study: BaseSuper Class Structure & Functionality" },
        { "id": "OpUUWZeg8zI", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1C in CS 891" },
        { "id": "FD95nEL-I8M", "title": "Applying ChatGPT to Understand Java Code and Rewrite It in Different Programming Paradigms" },
        { "id": "WUpQ0V7D4bU", "title": "Using ChatGPT to Generate a Retrofit API Client Automatically" },
        { "id": "dHibOnsgcas", "title": "The QuoteServices App Case Study: Handey Microservice Structure & Functionality" },
        { "id": "FaYlv8wA5pQ", "title": "The QuoteServices App Case Study: Implementing the Handey Microservice" },
        { "id": "Gw42s-JRJBc", "title": "The QuoteServices App Case Study: Zippy Microservice Structure & Functionality (Part 1)" },
        { "id": "AFx5TUc4cMk", "title": "The QuoteServices App Case Study: Zippy Microservice Structure & Functionality (Part 2)" },
        { "id": "R4WLWLZZbsg", "title": "The QuoteServices App Case Study: Implementing the Zippy Microservice" },
        { "id": "WmRqR1WNhqU", "title": "The QuoteServices App Case Study: Structure & Functionality of Client Classes" },
        { "id": "oct_p1d-ctc", "title": "The QuoteServices App Case Study: Test Driver Implementation & Performance" },
        { "id": "quk5jaZTYsE", "title": "Walkthrough of Assignment 2A" },
        { "id": "fnz9eiwEnrA", "title": "Overview of the Java Reactive Streams API" },
        { "id": "kDBa3iMLnPM", "title": "Overview of Reactive Programming Principles" },
        { "id": "V_9iR2LgNHc", "title": "Mapping Java Reactive Streams Onto Reactive Programming Principles" },
        { "id": "xueMXjeoXAE", "title": "Overview of Popular Implementations of the Java Reactive Streams API" },
        { "id": "D4963KQhBwY", "title": "Evaluating Java Programming Paradigms" },
        { "id": "xGZK7r7FHkk", "title": "Understanding Key Classes in the Project Reactor API" },
        { "id": "NkKp8_fA3L8", "title": "Overview of the BigFraction Case Studies" },
        { "id": "-_glahG3Eaw", "title": "Overview of the Project Reactor AsyncTaskBarrier Framework" },
        { "id": "LXmsPjeJbh4", "title": "Key Factory Method Operators in the Flux Class (Part 1)" },
        { "id": "nmDOL7CO5j8", "title": "Key Transforming Operators in the Flux Class (Part 1)" },
        { "id": "Pk6b1S21ixw", "title": "Key Action Operators in the Flux Class(Part 1)" },
        { "id": "wlALTrcvP4M", "title": "Key Combining Operators in the Flux Class (Part 1)" },
        { "id": "qJZxehSIePg", "title": "Key Terminal Operators in the Flux Class" },
        { "id": "SvP98TYYmuc", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2A" },
        { "id": "SfBUd_uj2ss", "title": "Yet Another Preliminary Walkthrough of Assignment 2A Frequently Made Mistakes" },
        { "id": "sOHHzDttRD0", "title": "Applying Key Operators in the Flux Class: Case Study ex1 (Part 1)" },
        { "id": "2wDF01_NSSY", "title": "Applying Key Operators in the Flux Class: Case Study ex1 (Part 2)" },
        { "id": "QPCEzdlyK9A", "title": "Key Concurrency & Scheduler Operators in the Flux Class (Part 1)" },
        { "id": "IuessQgJGnI", "title": "Key Factory Method Operators in the Flux Class (Part 2)" },
        { "id": "4IQKDbqwmDw", "title": "Key Action Operators in the Flux Class(Part 2)" },
        { "id": "UvUfGqkqqxE", "title": "Key Suppressing Operators in the Flux Class" },
        { "id": "9azlK8VdfcQ", "title": "Applying Key Operators in the Flux Class:Case Study ex2 (Part 1)" },
        { "id": "FBlbkpMwm10", "title": "Applying Key Operators in the Flux Class:Case Study ex2 (Part 2)" },
        { "id": "puihl76hx6I", "title": "One Final Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2A" },
        { "id": "GqnKgQfbMiQ", "title": "Walkthrough of Frequently Made Mistakes in Assignment 2A for CS 891" },
        { "id": "CS4MCeimGoo", "title": "Walkthrough of Assignment 2B" },
        { "id": "qS88HFWs978", "title": "Key Factory Method Operators in the Flux Class (Part 3)" },
        { "id": "3U1SZ0TjyuE", "title": "Key Transforming Operators in the Flux Class (Part 2)" },
        { "id": "5BhewlJ4VRE", "title": "Key Concurrency & Scheduler Operators in the Flux Class (Part 2)" },
        { "id": "w7xh623g9Lk", "title": "Key Error Handling Operators in the Flux Class" },
        { "id": "BiMO8SYO-wQ", "title": "Key Combining Operators in the Flux Class (Part 2)" },
        { "id": "KQ0HrhO3UU0", "title": "Applying Key Operators in the Flux Class: Case Study ex3 (Part 1)" },
        { "id": "KMTHbiOKzCA", "title": "Applying Key Operators in the Flux Class: Case Study ex3 (Part 2)" },
        { "id": "agUy9le2T1k", "title": "Applying Key Operators in Project Reactor: Case Study ex4 (Part 1)" },
        { "id": "iRKLwzjkpOE", "title": "Applying Key Operators in Project Reactor: Case Study ex4 (Part 2)" },
        { "id": "P-DgRlCddbE", "title": "Implementing the AsyncTaskBarrier Framework Using Project Reactor (Part 1)" },
        { "id": "HxG6gZ7qhSs", "title": "Implementing the AsyncTaskBarrier Framework Using Project Reactor (Part 2)" },
        { "id": "bfcu6GUvoZ0", "title": "The Reactive Pub/Sub Case Study" },
        { "id": "oO49qSJITJg", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 2B" },
        { "id": "IsAS18LIqDY", "title": "Overview of Spring WebFlux" },
        { "id": "8nrnpEtIM-4", "title": "Comparing & Contrasting Spring WebMVC & WebFlux" },
        { "id": "4eB0gBtAGLU", "title": "The LockManager App Case Study: Overview" },
        { "id": "vdhH8WEWUNo", "title": "The LockManager App Case Study: Server Structure & Functionality" },
        { "id": "zaaiXGzhxRQ", "title": "The LockManager App Case Study: Implementing the Server Components" },
        { "id": "TGSotYpdtcU", "title": "The LockManager App Case Study: Client Structure & Functionality" },
        { "id": "ntlCi1s7yjk", "title": "The LockManager App Case Study: Test Driver Implementation" },
        { "id": "6XkCZF9RDts", "title": "Dealing with Incomplete Test Runs with IntelliJ for Assignment 2B" },
        { "id": "F2WKkPDgDYc", "title": "Final Walkthrough of Frequently Made Mistakes for Assignment 2B" },
        { "id": "5DDjZUMy7gw", "title": "The LockManager App Case Study: Overview" },
        { "id": "7gx4N4nD4J0", "title": "The LockManager App Case Study: Server Structure & Functionality" },
        { "id": "E22TIf02OyE", "title": "The LockManager App Case Study: Implementing the Server Components" },
        { "id": "fRN8N7XSlTc", "title": "The LockManager App Case Study: Client Structure & Functionality" },
        { "id": "qAoCfxfOX3I", "title": "The LockManager App Case Study: Test Driver & Client Implementation" },
        { "id": "pkfe8273pws", "title": "The Reactive QuoteServices App Case Study: Overview" },
        { "id": "5uk9yUcR3sQ", "title": "The Reactive QuoteServices App Case Study: Eureka Microservice Structure & Functionality" },
        { "id": "AN-F9LaTcBU", "title": "Walkthrough for Assignment 2C for Spring 2023" },
        { "id": "H-X8QrsP6uQ", "title": "The QuoteServices App Case Study: Common Structure & Functionality" },
        { "id": "peYje6Yecqk", "title": "The QuoteServices App Case Study: Implementing Classes in the Common Module" },
        { "id": "JiqrNUGWaco", "title": "The QuoteServices App Case Study: Handey Microservice Structure & Functionality (Part 1)" },
        { "id": "Q0heW8t3bSs", "title": "The QuoteServices App Case Study: Handey Microservice Structure & Functionality (Part 2)" },
        { "id": "b8VrDOM56Lg", "title": "The QuoteServices App Case Study: Implementing the Handey Microservice" },
        { "id": "2mVbO11nFTA", "title": "The QuoteServices App Case Study: Zippy Microservice Structure & Functionality" },
        { "id": "ppx5hCP_T00", "title": "The QuoteServices App Case Study: Implementing the Zippy Microservice" },
        { "id": "t55R7pBMvT8", "title": "The QuoteServices App Case Study: Structure & Functionality of Client Classes" },
        { "id": "t_0X-M6F9mU", "title": "The QuoteServices App Case Study: Implementing the Gateway Microservice" },
        { "id": "jCEYTXMUCqE", "title": "The QuoteServices App Case Study: Implementing the Client-related Classes" },
        { "id": "fm3J9nu5Md0", "title": "Overview of Backpressure Models in the Project Reactor Flux" },
        { "id": "LQ2dd3YvSvE", "title": "Key Factory Method Operators in the Flux Class (Part 5)" },
        { "id": "KOY6erofciU", "title": "Applying Key Operators in Project Reactor: Case Study ex4 (Part 1)" },
        { "id": "fE_pqANunIc", "title": "Applying Key Operators in Project Reactor: Case Study ex4 (Part 2)" },
        { "id": "axF7DaxtCxQ", "title": "Applying Key Operators in Project Reactor: Case Study ex4 (Part 3)" },
        { "id": "LGbSSqDRNo4", "title": "Overview of Server-side Caching with Spring WebMVC" },
        { "id": "XuBh47zmATE", "title": "Overview of the ParallelFlux Class" },
        { "id": "H5QAMyy9B1g", "title": "Key Scheduler Operators for Project Reactor Reactive Types (Part 3)" },
        { "id": "h1I4fNrXYco", "title": "Applying Key Operators in the Parallel Flux Class: Case Study ex5 (Part 1)" },
        { "id": "Wq2B8ZOCJI4", "title": "Applying Key Operators in the Parallel Flux Class: Case Study ex5 (Part 2)" },
        { "id": "E527lIhZHTs", "title": "Walkthrough of Assignment 3 for Spring 2023" },
        { "id": "Rf43t_qrGVU", "title": "The PrimeCheck App Case Study: Overview" },
        { "id": "QpplQ-vNWlw", "title": "The PrimeCheck App Case Study: Server Structure & Functionality" },
        { "id": "oBr_7ptww8c", "title": "The PrimeCheck App Case Study: Implementing Server Components" },
        { "id": "JmQZ-jMfSWg", "title": "The PrimeCheck App Case Study: Client Structure & Functionality" },
        { "id": "usCDwk72M8A", "title": "The PrimeCheck App Case Study: Implementing the Client" },
        { "id": "hx0gHFTmQB4", "title": "The PrimeCheck App Case Study: Test Driver Implementation & Performance" },
        { "id": "EN9v9Iwvi64", "title": "The Image Counter Case Study (Part 1)" },
        { "id": "kXXQqRKBMJs", "title": "The Image Counter Case Study (Part 2)" },
        { "id": "alKOuV_f8pQ", "title": "Walkthrough of Frequently Made Mistakes for Assignment 2C" },
        { "id": "XSCKrUI6-80", "title": "Initial Preview of Frequently Made Mistakes for Assignment 3" },
        { "id": "gI66lNyc4go", "title": "Overview of RSocket" },
        { "id": "a9_aqhhn5U0", "title": "Overview of RSocket Interaction Models" },
        { "id": "CexR1DH8HXg", "title": "Overview of the RSocket Connection & Messaging APIs" },
        { "id": "aXY0XP97mNc", "title": "Integrating the RSocket APIs in Spring" },
        { "id": "B1v6XoyupBw", "title": "Overview of the RSocket ZippyQuotes App" },
        { "id": "59lAkHxGjT4", "title": "The Structure & Functionality of the RSocket ZippyQuotes Server" },
        { "id": "DuBUgLk4xsk", "title": "Implementing the RSocket ZippyQuotes Case Study App Server (Part 1)" },
        { "id": "qslGLxttXz4", "title": "Implementing the RSocket ZippyQuotes Case Study App Server (Part 2)" },
        { "id": "-jJfrb21qyA", "title": "The Structure & Functionality of the RSocket ZippyQuotes Client" },
        { "id": "KJunLR5O2io", "title": "Implementing the RSocket ZippyQuotes Case Study App Client" },
        { "id": "uQHkkyVjFFk", "title": "Another Preliminary Walkthrough of Frequently Made Mistakes for Assignment 3" },
        { "id": "9_Pk9KlEz7E", "title": "Overview of the RSocket Quotes Backpressure App" },
        { "id": "VfDmIiVOkEg", "title": "The Structure & Functionality of the RSocket Quotes Server" },
        { "id": "o82EiyYKDos", "title": "Implementing the RSocket Quotes Backpressure Case Study App Server (Part 1)" },
        { "id": "P5-Ni7Z59A0", "title": "Implementing the RSocket Quotes Backpressure Case Study App Server (Part 2)" },
        { "id": "JsxH8jlHQlk", "title": "The Structure & Functionality of the RSocket Quotes Backpressure Client" },
        { "id": "BTHLx9TzV7Q", "title": "Implementing the RSocket Quotes Backpressure Case Study App Client" },
        { "id": "cQ0jiNGDET8", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3" },
        { "id": "cQz2qEBJgT8", "title": "Overview of the RSocket Shakespeare Quotes App" },
        { "id": "DGnrBxTflt0", "title": "Structure & Functionality of the RSocket Shakespeare Quotes Responder (Part 1)" },
        { "id": "PZXFyIoC2uc", "title": "Structure & Functionality of the RSocket Shakespeare Quotes Responder (Part 2)" },
        { "id": "OEMIFJYpBWA", "title": "Implementing the RSocket Shakespeare Quotes Case Study App Responder (Part 2)" },
        { "id": "ymkEsQHj9Jc", "title": "Implementing the RSocket Shakespeare Quotes Case Study App Responder (Part 3)" },
        { "id": "QLkj1LylbEM", "title": "The Structure & Functionality of the RSocket Shakespeare Quotes Requester" },
        { "id": "l0RMgUj9RSM", "title": "Implementing the RSocket Shakespeare Quotes Case Study App Test Driver" }
      ]
    }, {
      "title": "Modern Java Programming Examples",
      "videos": [
        { "id": "4ti5AlguRjg", "title": "Demonstrating Advanced Java Features to Compute, Cache, and Retrieve Large Prime Numbers" },
        { "id": "MWdDAQ1o86Y", "title": "Applying Java Streams Terminal Operations in Practice" },
        { "id": "2v1eBQHDqy8", "title": "A Performance Comparison of Java Spliterators and Collectors for Various Java Collections" },
        { "id": "kAntxKftgW8", "title": "Comparing Sequential and Parallel Algorithms for Computing Factorials with Java" },
        { "id": "_pXBAPJpn_Q", "title": "Overcoming the Limitations of `flatMap()` in Java Parallel Streams" },
        { "id": "TE4wB3nEE0c", "title": "Applying Java `CompletableFuture` Methods (Part 1)" },
        { "id": "Ckk6ENTgrrw", "title": "Applying Java `CompletableFuture` Methods (Part 2)" },
        { "id": "4wpLxlHbA-0", "title": "The Perils of Making Too Many `join()` Calls on Java CompetableFuture" },
        { "id": "23NfeBnGOTA", "title": "Combining the Java Streams and Completable Futures Frameworks for Scalable Asynchronous Processing" },
        { "id": "hbCkKO64ge0", "title": "Handling Timeouts Asynchronously with the Java Completable Futures Framework" },
        { "id": "7SAa3ufRfp0", "title": "Comparing Java Imperative Object-Oriented Code with Java Declarative Functional Code" },
        { "id": "cvwFm5gWvlU", "title": "Comparing Java Anonymous Inner Classes, Lambda Expressions, and Method References" },
        { "id": "HATITJQoO8E", "title": "Using the `removeIf()` Method on a Mutable Java List" },
        { "id": "7dy1v3nAmZw", "title": "Composing Modern Java Function Objects via the andThen() Method" },
        { "id": "yStU8e0ozUc", "title": "Comparing Modern Java's `replaceAll()` Method with a Java 7 For-each Loop" },
        { "id": "3BDGke6NZBg", "title": "Applying the Java Consumer Functional Interface with the forEach() Method" },
        { "id": "7M5Hw0CXpw4", "title": "Applying the Java Supplier Interface Together with the Java Optional Class" },
        { "id": "99mfZf32yWk", "title": "Applying Java Predicate with ConcurrentHashMap `removeIf()`" },
        { "id": "XKkvQKuDYck", "title": "Applying Java Supplier Objects with Constructor References" },
        { "id": "qbXAfelNQ58", "title": "The Perils of Mutating Java Streams Via the `peek()` Operation" },
        { "id": "NRD3hk6wVtw", "title": "Applying the Java Streams `forEach*()` Terminal Operations in Practice" },
        { "id": "PVj4me6BUU4", "title": "Applying the Java Streams `reduce()` Terminal Operations in Practice" },
        { "id": "ydjLTQyeT4g", "title": "Applying the Java Streams `collect()` Terminal Operation in Practice" },
        { "id": "qpgNZkHin_4", "title": "Applying Java Spliterators in Practice" },
        { "id": "f51YH7ExmuM", "title": "Comparing Java Streams Operation Performance for Sequential vs. Parallel Processing" },
        { "id": "4rTCjEBCvKU", "title": "Applying Java Parallel and Sequential Streams to Build a Cosine Vector Map Describing Movies" },
        { "id": "dps1-tLawo4", "title": "Computing Factorials with Java Sequential and Parallel Streams" },
        { "id": "W1_VfDu8_ik", "title": "Encapsulating the Java `CompletableFuture` `allOf()` Method with Various Wrappers (Part 1)" },
        { "id": "cZBPau60tY0", "title": "Encapsulating the Java `CompletableFuture` `allOf()` Method with Various Wrappers (Part 2)" },
        { "id": "U-0a_Lsawvc", "title": "Comparing the Overview of Blocking vs. Non-Blocking with the Java Completable Futures framework." },
        { "id": "hNelbi523Yo", "title": "Applying Java 9 Timeouts in the Completable Futures Framework" },
        { "id": "ijPDejYY9v0", "title": "Demonstrating the Lazy Processing Semantics of the Java Streams and Completable Futures frameworks." },
        { "id": "GF1Y3H2Mpoc", "title": "Image Crawling with the Java Completable Futures Framework (Part 1)" },
        { "id": "fafRhUDkR1Y", "title": "Image Crawling with the Java Completable Futures Framework (Part 2)" },
        { "id": "pD1SZWUDvQ0", "title": "Image Crawling with the Java Completable Futures Framework (Part 3)" },
        { "id": "0U8I8UMUzN4", "title": "Exploring Java Fork-Join Framework Programming Models (Part 1)" },
        { "id": "xJVX_sukRrs", "title": "Exploring Java Fork-Join Framework Programming Models (Part 2)" }
      ]
    }, {
      "title": "CS 253 (2022) Parallel Functional Programming with Java, Android, and Spring WebFlux",
      "videos": [
        { "id": "t_0SgJcxb2k", "title": "Walkthrough of Assignment 1A" },
        { "id": "X-CSMbFEHT8", "title": "CS 253: Parallel Functional Programming with Java, Android, & Spring WebFlux: Overview (Part 1)" },
        { "id": "w8LBDkna94w", "title": "CS 253: Parallel Functional Programming with Java, Android, & Spring WebFlux: Overview (Part 2)" },
        { "id": "5xff4RXUDLk", "title": "CS 253: Parallel Functional Programming with Java, Android, & Spring WebFlux: Overview (Part 3)" },
        { "id": "jIzXVpEv1HQ", "title": "CS 253: Parallel Functional Programming with Java, Android, & Spring WebFlux: Overview (Part 4)" },
        { "id": "d61GjAwzVsM", "title": "Overview of Sequential Programming Concepts" },
        { "id": "SOEGDTjQpOU", "title": "Evaluating the Pros & Cons of Sequential Programming" },
        { "id": "o-D7sBF3fiY", "title": "Overview of Concurrent Programming Concepts" },
        { "id": "Jy6BstXsTRE", "title": "Overview of How Concurrent Programs are Developed in Java (Part 1)" },
        { "id": "zA-sw67liD4", "title": "Overview of How Concurrent Programs are Developed in Java (Part 2)" },
        { "id": "RfP7Dc-fPt8", "title": "Overview of Java Concurrency Hazards" },
        { "id": "9DUbny74yP8", "title": "The History of Concurrency Support in Java" },
        { "id": "XGigpu1gj9g", "title": "Overview of Parallel Programming Concepts" },
        { "id": "j1Gfw7aAq_E", "title": "How Parallel Programs are Developed in Java (Part 1)" },
        { "id": "qCR8YYjHxhI", "title": "How Parallel Programs are Developed in Java (Part 2)" },
        { "id": "9pOp2-dD-rc", "title": "How Parallel Programs are Developed in Java (Part 3)" },
        { "id": "HgNoNmExu6U", "title": "When to Apply Parallelism in Practice" },
        { "id": "781sPnaYEog", "title": "The History of Parallelism Support in Java" },
        { "id": "YSOmWAYxhuM", "title": "Evaluating Java's Concurrency & Parallelism Mechanisms & Frameworks" },
        { "id": "ifU7IQpc8bI", "title": "Overview of Java Streams" },
        { "id": "1_Zspi5gzsg", "title": "Overview of Java Streams Phases" },
        { "id": "-zfQ_P2WDEA", "title": "Understanding Java Streams Common Creation Operations" },
        { "id": "V55Bg8cuVsM", "title": "Understanding Java Streams Common Aggregate Operations" },
        { "id": "ObFJUFxgFLo", "title": "Visualizing Java Streams in Action" },
        { "id": "_MopQSK89y0", "title": "Comparing Java Sequential Streams with Java Parallel Streams" },
        { "id": "qrjzIBCfNRg", "title": "Common Programming Hazards with Java Parallel Streams" },
        { "id": "9I7ggez7020", "title": "Recognizing Java Streams Benefits" },
        { "id": "5vUrM6RsamQ", "title": "Contrasting Java I/O Streams with Java Streams" },
        { "id": "gCkk7PhtM3I", "title": "Contrasting Java Streams with Java Collections" },
        { "id": "SD294lenYfo", "title": "Contrasting Java Streams with Other Technologies" },
        { "id": "IyO4jCPNJxQ", "title": "Overview of the SimpleSearchStream Program" },
        { "id": "qr5DEp0Io0k", "title": "Visualizing the `WordSearcher.findWords()` Method" },
        { "id": "Kea_nYw8Jjg", "title": "Common Java Streams Factory Methods" },
        { "id": "bT-CDNaJ2m0", "title": "Other Java Streams Factory Methods" },
        { "id": "CMPGLUKr3TE", "title": "Understanding Java Streams Aggregate Operations" },
        { "id": "L4VJibU1yqM", "title": "Understanding Java Streams Short-Circuit Aggregate Operations" },
        { "id": "XvXABXjngOY", "title": "Java Streams Intermediate Operations map() & mapToInt()" },
        { "id": "NRbzIvZLrPU", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1a" },
        { "id": "_XqDEGD6_ho", "title": "Java Streams Intermediate Operations filter() & flatMap()" },
        { "id": "KL_TkfH3Zcw", "title": "Exploring the Limitations of flatMap() for Java Parallel Streams" },
        { "id": "OScNDtmYxXc", "title": "Overview of Java Streams Terminal Operations" },
        { "id": "YfMxndevsU4", "title": "The Java Streams `forEach()` & `forEachOrdered()` Terminal Operations" },
        { "id": "qQ14Cphz2bk", "title": "The Java Streams `collect()` Terminal Operation (Part 1)" },
        { "id": "A60oPuRkVbg", "title": "The Java Streams `collect()` Terminal Operation (Part 2)" },
        { "id": "P7TH8xFyh6E", "title": "The Java Streams `reduce()` Terminal Operation (Part 1)" },
        { "id": "ksuksdUOZOg", "title": "The Java Streams `reduce()` Terminal Operation (Part 2)" },
        { "id": "HWq9pT3UvlA", "title": "Walkthrough of Assignment 1B" },
        { "id": "u7APHCn4IZQ", "title": "An Overview of Parallelism & Java Parallel Streams" },
        { "id": "Zfd8CXRzU_w", "title": "How Java Parallel StreamsWork “Under the Hood”" },
        { "id": "OQZvcAbt4p4", "title": "Avoiding Programming Hazards with Java Parallel Streams" },
        { "id": "tXnWloiDTBY", "title": "Overview of the Java SearchWithParallelStreams Case Study" },
        { "id": "2PXWhDRZEfE", "title": "Visualizing the Java SearchWithParallelStreams Hook Methods" },
        { "id": "EcfH8EjLnhY", "title": "Implementing the Java SearchWithParallelStreams Hook Methods" },
        { "id": "benxI37aE2I", "title": "Evaluating the Java SearchWithParallelStreams Case Study" },
        { "id": "DUx2aOoW87c", "title": "The Java Streams `collect()` Terminal Operation (Part 3)" },
        { "id": "WV6Ky9S7PiQ", "title": "The Java Streams `collect()` Terminal Operation (Part 4)" },
        { "id": "DZI1xbQ15CU", "title": "Java Stream Internals: Construction" },
        { "id": "LvUSi0e0lYo", "title": "Java Stream Internals: Execution" },
        { "id": "qOVxJEJFmMg", "title": "Java Parallel Streams Internals: Introduction" },
        { "id": "E8Ykbn_St1Y", "title": "Java Parallel Streams Internals: Splitting, Combining, & Pooling" },
        { "id": "qfDbCCnsx9Y", "title": "Java Parallel Streams Internals: Order of Processing Overview" },
        { "id": "PWo7iIjzGOM", "title": "Java Parallel Streams Internals: Order of Results Overview" },
        { "id": "8ejNZZBmhDU", "title": "Java Parallel Streams Internals: Order of Results for Collections" },
        { "id": "xoIjMsvhN9o", "title": "Java Parallel Streams Internals: Order of Results for Aggregate Operations" },
        { "id": "ec7zNWmKaOE", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1B" },
        { "id": "RLeg3Wr0y2E", "title": "Overview of Spring & Spring Boot" },
        { "id": "e6qMtbH1ZJE", "title": "Overview of Spring Boot Software Patterns" },
        { "id": "vrUPNZShiCg", "title": "Overview of Spring Boot’s Internal Architecture" },
        { "id": "KlSjXKMqUgM", "title": "Overview of Spring WebMVC" },
        { "id": "9MaOGgGtKIQ", "title": "The PrimeCheckApp Case Study: Overview" },
        { "id": "q7juMJ8UVzQ", "title": "The PrimeCheckApp Case Study: Server Structure & Functionality" },
        { "id": "TTllPtOb2Gk", "title": "The PrimeCheckApp Case Study: Implementing the Server Components" },
        { "id": "r65Zcim0VVk", "title": "The PrimeCheckApp Case Study: Structure & Functionality of the Client" },
        { "id": "342Vo4q67n8", "title": "The PrimeCheck App Case Study: Implementing the Client" },
        { "id": "PmkDgCUoV2g", "title": "The PrimeCheckApp Case Study: Test Driver Implementation & Performance" },
        { "id": "jomE8JFtKf0", "title": "Walkthrough of Assignment 2 (Part 1: the Server)" },
        { "id": "2WyLUAU_3jk", "title": "Walkthrough of Assignment 2 (Part 2; the Client)" },
        { "id": "_-v-Y_A60Qo", "title": "Java Parallel Streams Internals: Partitioning" },
        { "id": "ej44fY-QdF8", "title": "Java Parallel Streams Internals: Demo’ing Spliterator Performance" },
        { "id": "E6S03N8d5Z4", "title": "Java Parallel Streams Internals: Parallel Processing w/the Common Fork-Join Pool (Part 1)" },
        { "id": "58c_Honw01Y", "title": "Java Parallel Streams Internals: Parallel Processing w/the Common Fork-Join Pool (Part 2)" },
        { "id": "VOTERz6VMy8", "title": "Java Parallel Streams Internals: Mapping Onto the Common Fork-Join Pool" },
        { "id": "j7nJsDethnM", "title": "Java Parallel Streams Internals: Configuring the Common Fork-Join Pool" },
        { "id": "ukiAnj9K0-I", "title": "Java Parallel Streams Internals: Demo’ ing How to Configure the Common Fork-Join Pool" },
        { "id": "yiro4d6G4ZM", "title": "Java Parallel Streams Internals: Combining Results (Part 1)" },
        { "id": "FYcE_7SIn9c", "title": "Java Parallel Streams Internals: Combining Results (Part 2)" },
        { "id": "qFo1f8d-lmc", "title": "Common Problems with Using the `reduce()` Terminal Operations in Java Parallel Streams" },
        { "id": "2LGUr8_pFPg", "title": "Java Parallel Streams Internals: Non-Concurrent & Concurrent Collectors (Part 1)" },
        { "id": "NHONOB0krXE", "title": "Java Parallel Streams Internals: Non-Concurrent & Concurrent Collectors (Part 2)" },
        { "id": "BFA9Q1XVfEw", "title": "Java Parallel Streams Internals: Demo’ing Collector Performance" },
        { "id": "QUA7_Hhykq8", "title": "Concurrent vs. Non-Concurrent Set Collectors for Java Sequential and Parallel Streams (Part 1)" },
        { "id": "iXGhAZt4H0Q", "title": "Concurrent vs. Non-Concurrent Set Collectors for Java Sequential and Parallel Streams (Part 2)" },
        { "id": "SCqll_UKr20", "title": "Java Parallel Streams Internals: Implementing a Concurrent Map Collector" },
        { "id": "kXz6zLamM7Q", "title": "Concurrent vs. Non-Concurrent Map Collectors for Java Sequential and Parallel Streams (Part 1)" },
        { "id": "sE0m81v40YQ", "title": "Concurrent vs. Non-Concurrent Map Collectors for Java Sequential and Parallel Streams (part 2)" },
        { "id": "MA_HdEi6Y20", "title": "When to Use Java Parallel Streams" },
        { "id": "b0slyViMknQ", "title": "When Not to Use Java Parallel Streams" },
        { "id": "sjHKBfqJ8d0", "title": "Applying Java Sequential and Parallel Streams to Count Folders, Documents, and Bytes in a Directory" },
        { "id": "km7X6sAQBH4", "title": "Overview of the Java `SearchWithParallelSpliterator` Case Study" },
        { "id": "ErAsyWO93Yo", "title": "Java `SearchWithParallelSpliterator` `PhraseMatchSpliterator` & Fields" }       
      ]
    }, {
      "title": "CS 8395: Scalable Microservices",
      "videos": [
        { "id": "GithhrXumdw", "title": "Overview of Spring & Spring Boot" },
        { "id": "CcWftQ7ZSjk", "title": "Overview of Spring Boot Design Patterns" },
        { "id": "HPjb1qWpR9I", "title": "Overview of Spring Boot’s Internal Architecture" },
        { "id": "MStOKrsOlZ4", "title": "Overview of Spring WebMVC" },
        { "id": "86pNJgR5jMo", "title": "The PrimeCheckApp Case Study" },
        { "id": "CxEQW5nXjo4", "title": "Overview of the Monolithic Implementation of the Flight Listing App (FLApp) Case Study" },
        { "id": "8MRGT_uBazI", "title": "Walkthrough of the Monolithic Implementation of the Flight Listing App (FLApp) Case Study" },
        { "id": "gQV4OoDd6QM", "title": "Walkthrough of an Android Client for the Flight Listing App (FLApp) Case Study" },
        { "id": "hLvI48Xkm1Q", "title": "Walkthrough of Three Functional Algorithms for Finding the Minimum Values in an Unordered List" },
        { "id": "SdQ0zqb5ACg", "title": "Flight Listing App (FLApp) Case Study Overview (Part 2)" },
        { "id": "VdAv9X2IDLw", "title": "Walkthrough of the Functional Implementation of the Flight Listing App (FLApp) Case Study (Part 1)" },
        { "id": "qv1ZiIHkyoY", "title": "Walkthrough of the Functional Implementation of the Flight Listing App (FLApp) Case Study (Part 2)" },
        { "id": "Gwrjl7vEwnU", "title": "Walkthrough of the Functional Implementation of the Flight Listing App (FLApp) Case Study (Part 3)" },
        { "id": "DL_WJKGSQsA", "title": "Overview of Spring WebFlux" },
        { "id": "7tXuzAyAoVk", "title": "Comparing & ContrastingSpring WebMVC & WebFlux" },
        { "id": "u7yVkryhLj0", "title": "Walkthrough of the Reactive Implementation of the Flight Listing App (FLApp) Case Study (Part 1)" },
        { "id": "oYGs1C-2DIE", "title": "Walkthrough of the Reactive Implementation of the Flight Listing App (FLApp) Case Study (Part 2)" },
        { "id": "PxB4m8VALlU", "title": "Walkthrough of the Reactive Implementation of the Flight Listing App (FLApp) Case Study (Part 3)" },
        { "id": "VS9a4m1CcTw", "title": "Java Streams and Reactive Streams implementations of Sequential/Parallel Factorial Computation" },
        { "id": "kEsx0_YktqQ", "title": "Downloading Images from Remove Web Servers via Java Parallel Streams" },
        { "id": "cEjG4j92WXk", "title": "Downloading Images from Web Services via RxJava and Project Reactor Reactive Streams Frameworks" },
        { "id": "8p79J1IASKI", "title": "Using Project Reactor to Find Minimum Values in an Unordered List" },
        { "id": "gBuuNN5U8us", "title": "Walkthrough of Assignment 4" },
        { "id": "bsNMWbO8Kk4", "title": "Walkthrough of Frequently Made Mistakes for Assignment 3" },
        { "id": "3AW7to8S6eo", "title": "Walkthrough of Frequently Made Mistakes for Assignment 4" }
      ]
    }, {
      "title": "CS 254 (2022) Concurrent Object-Oriented Programming with Java and Android",
      "videos": [
        { "id": "z_zhPHHaBQM", "title": "Walkthrough of Assignment 1a" },
        { "id": "DH7FTw8UXO0", "title": "Concurrent Object-Oriented Programming with Java and Android: Course Overview and Logistics" },
        { "id": "h7JPJlKZHKk", "title": "Overview of Sequential Programming Concepts" },
        { "id": "Z6hl61wRlvY", "title": "Overview of Concurrency Concepts" },
        { "id": "a8jNINjG7zk", "title": "Overview of How Concurrent Programs are Developed in Java" },
        { "id": "lazX4ClWiHk", "title": "The History of Concurrency Support in Java" },
        { "id": "ORIDg6NFbLw", "title": "Introduction to Java Threads" },
        { "id": "MHTtjEqi4eM", "title": "Overview of the Java Thread Case Study App" },
        { "id": "pVW0_jS00Rw", "title": "Ways of Giving Code to a Java Thread" },
        { "id": "TDdl3z6MWPc", "title": "Passing Parameters to a Java Thread" },
        { "id": "Supyrpu1Qz0", "title": "Java Platform Threads vs. Virtual Threads" },
        { "id": "Oz9ATVPt6l0", "title": "How Java Threads Start and Run" },
        { "id": "gFodDpANV2E", "title": "Key Methods in a Java Thread" },
        { "id": "eIjc7Nu6OAw", "title": "Types of Java Threads (Part 1)" },
        { "id": "lealqhlzx5U", "title": "Types of Java Threads (Part 2)" },
        { "id": "Uxm8hhqCDxM", "title": "Evaluating Java Thread Programming Models" },
        { "id": "g1rfY8uR0Lw", "title": "Overview of the Java Memory Model" },
        { "id": "ct7Ck7wxCug", "title": "Overview of Java Synchronizers" },
        { "id": "QkekjYkkBEM", "title": "The Pervasiveness & Complexity of Java Synchronizers" },
        { "id": "Bn_yzD59KII", "title": "Types of Java Synchronizer Capabilities (Part 1)" },
        { "id": "WZfHPLdIxpU", "title": "Types of Java Synchronizer Capabilities (Part 2)" },
        { "id": "4Cl5uxeYXLY", "title": "Walkthrough of Assignment 1B" },
        { "id": "RZB0pk_TBOQ", "title": "Walkthrough of Frequently Made Mistakes for Assignment 1A" },
        { "id": "oAPyL8GmP-4", "title": "Synopsis of Java Synchronizer Classes" },
        { "id": "ISzgSskhBGg", "title": "Usage Considerations of Java Synchronizer Classes" },
        { "id": "-fVCIqt3zXI", "title": "Overview of Atomic Operations" },
        { "id": "92-L61Wi7G4", "title": "Overview of Java Atomic Operations & Variables" },
        { "id": "yJ1wQ6tdNfI", "title": "Introduction to Java Volatile Variables" },
        { "id": "gKwwqIWjv5Q", "title": "Example Application of Java Volatile Variables" },
        { "id": "DrQ7EClmWn8", "title": "Usage Considerations of Java Volatile Variables" },
        { "id": "tq2LL2tvwqg", "title": "Introduction to Java Atomic Classes & Operations" },
        { "id": "rKF0WrtoFis", "title": "Implementing & Applying Java Atomic Operations" },
        { "id": "acEbiByZTKc", "title": "Implementing Java AtomicLong" },
        { "id": "F_804j2A4LM", "title": "Implementing Java AtomicBoolean" },
        { "id": "cpQ4Q0KC8w4", "title": "Applying Java AtomicLong" },
        { "id": "H7ieiiag5Z4", "title": "Usage Considerations for Java Atomic Classes & Operations" },
        { "id": "q5WX-hYQSJo", "title": "Introduction to Java Semaphore" },
        { "id": "XeASHXcgKVg", "title": "Structure & Functionality of Java Semaphore" },
        { "id": "KAF_W9EfUQ0", "title": "Preliminary Walkthrough of Frequently Made Mistakes for Assignment 1B" },
        { "id": "KaIGpeCNMKc", "title": "Key Methods in Java Semaphore" },
        { "id": "3px3fSGXTXY", "title": "Mediating Access to Shared Resources via Java Semaphore" },
        { "id": "T3BDJS4JSr8", "title": "Coordinating Threads via Java Semaphore" },
        { "id": "x2yo3Vj5bgQ", "title": "Java Semaphore Usage Considerations" },
        { "id": "VXoi4P-FfjE", "title": "Introduction to the Java Executor Framework" },
        { "id": "00XGZ7KWJ08", "title": "Overview of Thread Pools" },
        { "id": "xRmdy8Q2CKw", "title": "Overview of Java Thread Pools" },
        { "id": "UWdYJILC9uo", "title": "Key Interfaces in the Java Executor Framework" },
        { "id": "fr16hehgn-0", "title": "The Java Executor Framework: The Java Executors Class" },
        { "id": "7imneYw4W6o", "title": "Introduction to the Java Executor Interface" },
        { "id": "JhZHd-FZeK8", "title": "Java Executor Implementation Choices" },
        { "id": "NZeChqPqaLc", "title": "Applying Java Executor to the PrimeChecker App" },
        { "id": "WxcdPd2PR2g", "title": "Evaluating the Pros & Cons of the Java Executor Interface" },
        { "id": "DSzOVrlHBgU", "title": "Introduction to the Java ExecutorService" },
        { "id": "QBXJQZLj1es", "title": "Interfaces Related to the Java ExecutorService" },
        { "id": "PdNdxJWx9UE", "title": "Key Methods in the Java ExecutorService (Part 1)" },
        { "id": "j0j1Ds9vB-c", "title": "Key Methods in the Java ExecutorService (Part 2)" },
        { "id": "fNrdLoi2kT8", "title": "Overview of the Java ThreadPoolExecutor" },
        { "id": "1IUO-GC5tzg", "title": "Applying the Java ExecutorService to the PrimeChecker App" },
        { "id": "tJvjaUe7LWk", "title": "Evaluating Pros & Cons of the Java ExecutorService" },
        { "id": "HIHT7-atuHw", "title": "Walkthrough Frequently Made Mistakes for Assignment 1B" },
        { "id": "VrMbbcq5w_s", "title": "Introduction to Java ReentrantLock" },
        { "id": "l3ylwFUS-Gw", "title": "Structure & Functionality of Java ReentrantLock" },
        { "id": "wkYXjKTTSyQ", "title": "Java ReentrantLock Reentrant Mutex Semantics" },
        { "id": "UtH3eCgYU2o", "title": "Comparing a Java ReentrantLock and Non-reentrant Lock in Practice" },
        { "id": "KYv815d3Kpc", "title": "Key Methods in Java ReentrantLock" },
        { "id": "YhPLTtmNrTo", "title": "Example Application of Java ReentrantLock" },
        { "id": "P7xY310p5OU", "title": "Java ReentrantLock Usage Considerations" },
        { "id": "R-eUV7ZKP5I", "title": "Frequently Made Mistakes for Assignment 2A" },
        { "id": "xQa1r8WS8hI", "title": "Introduction to Java ConditionObject" },
        { "id": "3XTsDrNytgo", "title": "The Guarded Suspension Pattern" },
        { "id": "Mjy0VGSa5w4", "title": "Common Use Cases for Condition Variables" },
        { "id": "rOh3PYPH4KA", "title": "Structure & Functionality of Java ConditionObject" },
        { "id": "3ON5ZhI8_RY", "title": "Key Methods in Java ConditionObject" },
        { "id": "FSilAyUyqzw", "title": "Example Application of Java ConditionObject" },
        { "id": "JOKjSL9nA98", "title": "Java ConditionObject Usage Considerations" },
        { "id": "DrJ_ZotAPqU", "title": "Overview of Java Synchronizers: Built-in Monitor Objects" },
        { "id": "LiLdxOOvMRA", "title": "Introduction to Java Monitor Objects" },
        { "id": "v9QP9b6jzlo", "title": "Java Monitor Object Motivating Example" },
        { "id": "rxb1Tat2hsM", "title": "Evaluating the Java Monitor Object Motivating Example" },
        { "id": "ZzwlwYjEIv4", "title": "Java Monitor Object Synchronized Methods" },
        { "id": "tg8SB63HS18", "title": "Java Monitor Object Synchronized Statements" },
        { "id": "Dk39e0BkX1U", "title": "The Java Monitor Object Synchronized Method Example" },
        { "id": "vaOl7RdTpS8", "title": "Evaluating Java Monitor Object Synchronized Methods" },
        { "id": "AFpvKkbg4eU", "title": "Walkthrough of Assignment 2B" },
        { "id": "8uNrTS2HLC8", "title": "Coordination Methods for Java Monitor Objects" },
        { "id": "Fug-nXV6tOk", "title": "Visualizing the Java Monitor Object Coordination Example" },
        { "id": "ZjGb-tZaeNw", "title": "Implementing the Java Monitor Object Coordination Example" },
        { "id": "96EZzOU1Mek", "title": "Java Monitor Object Usage Considerations" },
        { "id": "0P5PNMVmPxo", "title": "Introduction to Java “Happens-Before” Relationships" },
        { "id": "Re2Nnj8MzeU", "title": "Examples of Java “Happens-Before” Relationships" },
        { "id": "dfACaydoxEM", "title": "Introduction to Safe Publication in Java" },
        { "id": "yXbcwaGkZXg", "title": "Safe Publication Techniques in Java" },
        { "id": "YMF2mxTZBag", "title": "Introduction to the Java ExecutorCompletionService" },
        { "id": "eGtwbtLfYH8", "title": "Key Methods in the Java ExecutorCompletionService" },
        { "id": "QwUuBP1OxTc", "title": "Implementation Internals of the Java ExecutorCompletionService" },
        { "id": "v6_vem5uuZU", "title": "Designing a Memoizer for Use With the Java ExecutorCompletionService" },
        { "id": "Oenj0sSforw", "title": "Implementing a Memoizer for Use With the Java ExecutorCompletionService" },
        { "id": "TcYipk7Y--E", "title": "Applying the Java ExecutorCompletionService to the PrimeChecker App" },
        { "id": "dc_oQTqFiiw", "title": "Evaluating Pros & Cons of the Java ExecutorCompletionService" },
        { "id": "a7skzo9_Z-k", "title": "Walkthrough of Assignment 3A" }
      ]
    }
  ]
}
