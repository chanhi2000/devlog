{
  "channel": {
    "id": "차태진",
    "name": "차태진",
    "profile": "https://yt3.googleusercontent.com/kmf0no_4sShajNQqkBmHS14YuPAtYM8Xvo1pXsfMAS3T_F_NeSIbSdtSeW66b8RSArZFKyywFA=s176-c-k-c0x00ffffff-no-rj",
    "banner": ""
  },
  "videos": [
    { "id": "IIaX38pw82U", "title": "25 07 31, p 14469, 17강, 논리 연산자를 사용하면 하나의 if문에 여러 조건을 사용할 수 있어서 편하다" },
    { "id": "J0Lr6QJR_TY", "title": "25 08 08, p14487, 5강, 10+20 == 30 기능을 꼼수로 구현" },
    { "id": "tdZAArGmWEc", "title": "25 08 08, p14487, 5강, 10+20 == 30 기능을 꼼수로 구현" },
    { "id": "wzPD2zyZ4Uo", "title": "25 08 27, p14494, 21강, 폰트 적용" },
    { "id": "yBvUePBgzfU", "title": "인텔리제이 설치하고 D2Coding 폰트 설치" },
    { "id": "gtSL-vnMKcU", "title": "Spring Initializr을 이용해 스프링 프로젝트 구성하고 다운받기" },
    { "id": "y6KsDLvG9oI", "title": "스프링부트 기초 내용 복습" },
    { "id": "8sfEmqz0pzg", "title": "MyBatis Mapper인 ArticleDao 작성" },
    { "id": "zkUYUbe2v0g", "title": "ArticleDao를 이용해 DB에 데이터 저장해보기" },
    { "id": "PxcRzVqjA3A", "title": "DB에서 게시물 전부를 가져와 브라우저에 출력하기" },
    { "id": "mF5bgNCzSYw", "title": "DB에서 게시물 전부를 가져와 브라우저에 출력하기" },
    { "id": "kDluRW0kmCI", "title": "게시물 id같은 데이터를 확보하는데 반드시 필요한 정보는 url에 포함시켜 서버에 넘기는 PathVariable 방식으로 사용" },
    { "id": "HFfUnXXNUMo", "title": "자바 파일에 sql이 같이 작성되면 추후에 sql이 복잡해질 때마다 관리가 어려워지므로 sql을 따로 분리한다" },
    { "id": "7gjs493EANQ", "title": "점프 투 스프링부트 공부하는 방법" },
    { "id": "m3xTXJOAVx4", "title": "컨트롤러의 게시물 저장, 조회하는 메서드들 더 좋은 방식으로 리팩토링" },
    { "id": "iHOxtPyxHn8", "title": "게시물 수정 기능 update 적용" },
    { "id": "EshM5LrotYU", "title": "게시물 삭제 기능 delete 적용" },
    { "id": "rjf9BtgfNkg", "title": "메서드에 많은 매개변수를 넘기다 보면 실수할 확률이 높다. 객체에 담아서 넘기고 이때 객체는 빌더 패턴을 이용해 만든다" },
    { "id": "K9vHZw_EzZw", "title": "ArticleDao의 save 메서드에도 매개변수를 Article 하나로 사용하도록 적용" },
    { "id": "hSxn6rmo7lE", "title": "자바 코드로 html 작성하는 것은 힘들다. html 파일을 따로 만들어서 분리해야 한다. 이때 컨트롤러 메서드에서 @ResponseBody를 제거해야 템플릿이 호출된다" },
    { "id": "xRtxyfAND_U", "title": "@ResponseBody는 사실 리턴값을 html 코드로 브라우저에 전달하는 역할이었다" },
    { "id": "krDRGhGfN8M", "title": "스프링부트 gradle에서는 build gradle에 라이브러리를 추가할 수 있다. 이때 maven repository에서 받아 찾는다" },
    { "id": "8nRA7jGYanY", "title": "자바의 Object 타입을 이용하여 모든 객체를 하나의 메서드로 처리할 수 있다" },
    { "id": "mUjZVyWiD70", "title": "타임리프 템플릿을 이용해 게시물 저장하기" },
    { "id": "o00MwJv6Ako", "title": "GET/POST 구별하여 요청하기  GET은 가져올 때, POST는 뭔가를 처리할 때 사용한다" },
    { "id": "6zrtevJ4sxU", "title": "일반적으로 하나의 기능을 만들 때는 템플릿을 보여주는 메서드와 데이터를 처리하는 메서드가 같이 만들어진다" },
    { "id": "CJJy8FFoND0", "title": "타임리프 변수 사용법" },
    { "id": "CLEmgB5F6KQ", "title": "타임리프 조건문 사용법" },
    { "id": "I1m1Js3Hx8M", "title": "타임리프 조건문을 이용해 나이에 따른 할인 여부 판별 문제 풀기, 라이브 리로드로 서버 재시작 없이 변경 반영하기" },
    { "id": "CNPNt16EwBg", "title": "타임리프 반복문 사용 방법" },
    { "id": "aHkjB61_I2g", "title": "타임리프 반복문과 조건문을 활용해 다양한 구구단 만들기 예제 풀이" },
    { "id": "XXNIqnwJbMk", "title": "타임리프 Model 객체를 이용하여 컨트롤러에서 템플릿으로 데이터 넘기기" },
    { "id": "xOj2m_O0SxU", "title": "타임리프 Model 객체를 이용하여 컨트롤러에서 템플릿으로 여러 다양한 데이터 넘기기" },
    { "id": "d6mAoVmOX2k", "title": "타임리프를 이용해 게시물 목록 기능 구현" },
    { "id": "lZuOZYN6v54", "title": "타임리프를 이용해 게시물 상세보기 기능 구현, 게시물 번호를 이용해 detail url을 동적으로 만들어준다" },
    { "id": "EkAgCKcwOlo", "title": "타임리프를 이용해 게시물 수정 기능구현, 제목과 내용 입력 가능하게 input 도입" },
    { "id": "5G4wlb-nXN0", "title": "타임리프를 이용해 게시물 수정 기능 구현  form을 이용해 전송하고 컨트롤러에서 처리" },
    { "id": "nwqQTJF_zZQ", "title": "게시물 수정 기능 완료 후 페이지를 다시 상세보기 화면으로 보여주기. 타임리프 에러 확인하는 방법" },
    { "id": "4iKKueo5CxE", "title": "게시물 등록 후 목록화면으로 가게 하기  포워딩 방식" },
    { "id": "onCm_JGye4s", "title": "게시물 등록 후 목록화면으로 가게 하기  리다이렉트 방식  포워딩 방식으로 하면 url과 화면이 일치하지 않아 의도하지 않은 작동을 유발한다  리다이렉트로 새로운 요청을 통해 ur" },
    { "id": "JKiGj-EJ2dQ", "title": "게시물 수정 기능 리다이렉트 적용" },
    { "id": "mtn_LZdM7w0", "title": "게시물 삭제 기능 구현 및 리다이렉트 적용" },
    { "id": "Wq2Bm544X6Q", "title": "form에는 submit이라는 이벤트가 있고 해당 이벤트가 발생했을 때 onsubmit으로 자바스크립트 코드를 실행시킬 수 있다" },
    { "id": "JmJSa0yJZFc", "title": "getElementById로 원하는 엘리먼트를 선택하여 자바스크립트로 제어할 수 있다. 자바스크립트로 제목이나 내용이 공백일 때 경고창 띄우고 form 제출 막기" },
    { "id": "RW5oS7zhupo", "title": "글 수정 기능에 validation check 기능 추가. form 태그를 this인자로 넘기는 방법 사용" },
    { "id": "ohc3YG62n6I", "title": "자바스크립트는 브라우저에서 실행되고 브라우저에서 임의로 끌 수 있다. 때문에 서버 쪽에서도 validation 체크를 해야만 한다" },
    { "id": "AiC0fI_7aAY", "title": "validation 체크할 매개변수가 많아지면 코드가 길어지므로 validation 라이브러리를 사용하여 효율적으로 리팩토링" },
    { "id": "lSnY1Nxtx64", "title": "핵심 로직은 재사용 가능하게 해야 유지보수성이 좋다. 이를 위해  Service객체를 도입한다" },
    { "id": "wfhtoSLfiFc", "title": "컨트롤러에서 모든 비즈니스 로직을 서비스로 옮기기 완료" },
    { "id": "XP7W1n7ZyK4", "title": "폼객체의 데이터는 세터가 있어야 파라미터 세팅이 가능하다. setter 추가하여 버그 수정" },
    { "id": "9ZnMOl1LskM", "title": "타임리프의 레이아웃을 목록과 등록 화면에도 적용" },
    { "id": "SFedl6YFbs8", "title": "눈누에서 프리텐다드 폰트 가져와서 적용, srcmainresourcesstatic 폴더가 정적 콘텐츠이미지 파일, CSS 파일, JS 파일를 저장하는 폴더들이다  참고로 고객이 사" },
    { "id": "DFgGHQeQ_yk", "title": "테일윈드는 CSS를 좀 더 편하고 효율적으로 할 수 있게 해주는 라이브러리다  CSS 방식과 테일윈드 방식을 버튼을 만들기 비교" },
    { "id": "hXD1J78_yUE", "title": "테일윈드 JIT 모드를 활용하면 설정값을 디테일하게 설정할 수 있다" },
    { "id": "P5mzXRfxRNY", "title": "테일윈드로 버튼에 hover 효과 주기" },
    { "id": "x3NK3wd6rzs", "title": "테일윈드 문제1 풀이 영상" },
    { "id": "VkIZMTqRolk", "title": "메뉴 리스트가 세로로 나와서 보기 좋지 않다  flex를 적용하여 요소들을 가로로 배치" },
    { "id": "WICXH7c_W1I", "title": "daisy UI같은 디자인 컴포넌트 라이브러리를 사용하면 개발자도 손쉽게 일정 퀄리티의 디자인을 구사할 수 있다  단, 컴포넌트를 원하는 위치에 배치하려면 flex는 필수이다" },
    { "id": "VwB0oBdVtRE", "title": "테일윈드, 데이지 UI, 플렉스를 활용하여 로그인 페이지 만들기" },
    { "id": "0d6CDbVu0aM", "title": "로그인 처리를 위해 로그인 컨트롤러에 PostMapping 메서드 만들고 처리  로그인 성공하면 게시물 목록으로 리다이렉트하고 로그인한 유저의 아이디 정보를 보낸다" },
    { "id": "GVAJdEPxs0U", "title": "model에 데이터를 담은 후 redirect로 넘기면 넘어가지 않는다  그 이유는 http의 데이터 처리 전략이 기본적으로 한번 사용하고 버리기 때문이다" },
    { "id": "SV_jvN9JNUA", "title": "HTTP는 불특정 다수가 동시적으로 사용하는 웹의 특성을 고려하여 고객의 정보를 힘들게 기억하지 않고 다 버려버린다. 이를 무상태성(stateless)이라고 한다" },
    { "id": "5EWwtd0R1ZY", "title": "HTTP는 요청과 응답시 데이터를 주고 받는다. 각각 요청 전문, 응답 전문이라고 하고 보통 Request, Response로 표현한다" },
    { "id": "LgGhBiWUblg", "title": "요청 데이터는 응답 하기 전까지만 유효하다. 따라서 응답한 후에는 사라지기 때문에 redirect 후에는 model 데이터를 사용할 수 없다." },
    { "id": "TAJCVerAWok", "title": "서버가 아예 고객을 기억하지 않는 것은 그래도 좀 찝찝하다  서비스 품질을 위해 특정 고객은 쿠키를 제공하여 기억하자" },
    { "id": "NON0OkBTH04", "title": "서버에서 쿠키를 만들고 고객에게 전달할 수 있다. 일반적으로 서버는 고객을 브라우저로 구분한다" },
    { "id": "cjp7gS6aRaY", "title": "서버에서 고객이 전달한 쿠키를 request 객체에서 꺼내 사용할 수 있다" },
    { "id": "0m4-x3hjEhQ", "title": "로그인 성공시 loginUser 쿠키에 로그인한 유저의 아이디를 저장하여 발행하기" },
    { "id": "CubfrkGOFFo", "title": "loginUser 쿠키가 없으면 로그인 하지 않은 것인데 네비게이션바에 환영인사 문구 흔적이 남아있다  로그인 했을 때만 해당 문구 보여주기" },
    { "id": "J3QzusKtEoQ", "title": "쿠키를 파기하여 로그아웃 기능 구현" },
    { "id": "jdba489-SjU", "title": "글쓰기, 상세보기에도 로그인 기능 적용하고 간단한 리팩토링 적용" },
    { "id": "lcSCvYtnst0", "title": "관리자 페이지 링크 만들고 연결  관리자 페이지는 임시로 구현" },
    { "id": "WiEol2gsSTs", "title": "관리자 링크를 로그인한 유저만 보이게 설정. 그러나 url 치고 들어가면 admin 페이지가 그대로 열린다. 서버쪽에서 이를 체크하여 올바르지 않은 접근을 저지해야 한다" },
    { "id": "iTTpGqb3v4c", "title": "관리자 권한이 아닌데 url로 다이렉트 접근할 수 있으므로 백엔드에서 한번 더 체크" },
    { "id": "ehK3SUSR0_s", "title": "관리자 권한과 일반 권한을 구별하기 위해 role 쿠키를 만들어 발급하고 체크하는 로직 구현" },
    { "id": "jG3hM6LuXXo", "title": "logout 버그 픽스 및 패키지 재설정" },
    { "id": "0Y6PhcMrvBQ", "title": "테스트를 위해 관리자 계정과 일반 계정을 만들기  member entity를 만들어 사용하기 편하게 함" },
    { "id": "QoEeTb3CbQA", "title": "쿠키는 클라이언트가 소유하기 때문에 클라이언트에 의해 위변조되어 악용될 수 있다. 세션을 이용해 중요 정보를 서버에서 관리하도록 한다." },
    { "id": "3Aa_0sX8ASQ", "title": "로그인 컨트롤러의 로그인 메서드에서 쿠키 방식으로 유저 정보를 저장하던 방식에서 세션 방식으로 변경" },
    { "id": "9iG4UJqNXZk", "title": "게시물 목록에서 로그인 여부 확인하고 회원 정보 템플릿으로 넘기기" },
    { "id": "rr2rshVu9XU", "title": "타임리프 역시 스프링부트 관리 하에 있기 때문에 스프링부트가 제공하는 세션에 접근할 수 있다  타임리프로 세션에 저장된 회원 아이디와 회원 권한 정보 사용하기" },
    { "id": "ymoqJ-LEhcQ", "title": "관리자 기능 세션 적용" },
    { "id": "gpZtOGb51mc", "title": "로그아웃 기능 세션 적용" },
    { "id": "g6gU4dyJ1Ek", "title": "관리자 기능 더 추가. 추가된 관리자 기능은 권한 체크를 하지 않아 일반 회원이 접근 가능하므로 역시 세션을 이용한 권한 체크를 통해 막는다" },
    { "id": "lN5qdqgNW6Y", "title": "관리자 권한 체크하는 필터 만들고 등록하기  이때 필터의 @Component 어노테이션이 붙어 있다면 빼줘야 한다" },
    { "id": "-pnfl6fDyBU", "title": "모든 요청은 디스패처 서블릿을 거친다. 따라서 서블릿에 필터를 부착하면 모든 요청을 검사할 수 있다" },
    { "id": "1npdND9vAk4", "title": "서블릿과 스프링 빈은 관리 주체가 다르다. 따라서 서로 충돌날 수 있으니 주의하자" },
    { "id": "P3CBUycMqPE", "title": "게시물 등록, 상세조회, 수정, 삭제 기능 로그인 기능으로 필터 체크" },
    { "id": "-fJqG7_t3qM", "title": "회원 정보를 MyBatis를 이용해서 DB에 저장하기  조금 번거롭다" },
    { "id": "bl4UocHUSkQ", "title": "개발 단계에서 JPA가 제대로 작동하는지 확인하기 위해서 JPA가 실행하는 SQL을 볼 수 있는 옵션을 활성화 한다" },
    { "id": "HEG_7BDDUc8", "title": "MyBatis로 구현된 게시물 기능을 JPA 방식으로 교체" },
    { "id": "_CMFmFwSO8g", "title": "로그인 기능 JPA 적용하기. JPA는 몇몇 기본 메서드를 제외하면 메서드 이름 규칙을 따라 메서드 시그니쳐를 직접 만들어줘야 한다" },
    { "id": "uqRU8NWmuHA", "title": "RDBMS에서는 게시물 테이블과 회원 테이블을 나누고 외래키로 연결한다  JPA에서도 이런 방식이 가능하다" },
    { "id": "TOV6zuaANE8", "title": "게시물과 회원 엔터티 연관관계 맺고 저장 및 조회하기" },
    { "id": "8ZwYloYMVIA", "title": "JPA는 엔터티들의 연관관계를 통해 외래키를 만들고 관리한다  연관관계는 일대일, 일대다, 다대다가 있다" },
    { "id": "1M7tB8hTZgo", "title": "댓글 도메인 구성하고 댓글 등록 기능 구현(아직 테스트 안됨)" },
    { "id": "0mb3o7rTA2Q", "title": "게시물 목록에 작성자 정보 표출하기" },
    { "id": "OHPe3VfBFFo", "title": "두 엔터티가 서로를 참조하는 양방향 관계에서는 mappedBy를 이용해 외래키 소유권을 정해줘야 한다. 양방향 관계를 이용한 댓글 작성 및 목록 구현" },
    { "id": "YaXM_RZl4Lk", "title": "댓글 삭제 구현" },
    { "id": "d2oiNXph5rU", "title": "댓글에 작성자 정보 추가" },
    { "id": "WXS5CTGyzoA", "title": "미션 기반 프로젝트 소개" },
    { "id": "cVVSWUnMmW0", "title": "포스트맨을 이용하면 브라우저를 거치지 않고 특정 서버에  다양한 요청을 보낼 수 있다. 포스트맨을 활용해 우리 서버 게시물 목록 요청" },
    { "id": "DdC4xcsgNKM", "title": "서버에서 로그인 검증을 하지 않으면 포스트맨 같은 http 도구로 올바르지 않은 데이터를 저장할 수 있다. 로그인 기능 필터 추가하기" },
    { "id": "E393kR7wQD8", "title": "대부분의 기능이 로그인을 해야 사용 가능한 회원 기능이라면 전체 요청을 로그인 필터에 태우고 몇몇 비회원 기능 url만 예외 url로 등록해서 관리하면 편하다" },
    { "id": "sHwyn--8bC8", "title": "Auth 도메인과 Member가 겹친다. 두 도메인을 분리. 도메인을 분리하는 과정은 클래스의 복잡도를 관리하기 위해서 필요하고 실무에서도 보통 그렇게 한다." },
    { "id": "H3mbKAjhuDs", "title": "일반적인 메서드의 경우 null을 리턴하지 않도록 작성하는 것이 메서드를 사용하는 쪽에서 편하다. null 리턴이 필요한 경우에는 메서드 이름에 Null 리턴을 명시하는 것이 좋다" },
    { "id": "Nfmzfz956Vs", "title": "회원이 작성한 게시물 정보 가져오기  단방향 관계 매핑 방식1" },
    { "id": "w50KJ3qUjh4", "title": "회원이 작성한 게시물 정보 가져오기  단방향 관계 매핑 방식2" },
    { "id": "rEkMD73NiO0", "title": "리액트에서는 함수 안에서 HTML을 작성할 수 있다. 다만 그것은 진짜 HTML이 아니고 JSX라는 조금 다른 버전의 HTML이다. JSX가 일반 HTML 문법과 다른 부분." },
    { "id": "bExPEXp0KSg", "title": "바닐라 JS로만 카운터 앱 만들기. DOM을 이용한 렌더링 부분을 함수로 따로 구현" },
    { "id": "Jdxs9_86lpQ", "title": "리액트로 카운터앱 만들기1 - 상태(state, setState)" },
    { "id": "zMFPJs_MTrc", "title": "리액트로 카운터앱 만들기2 - 리렌더링" },
    { "id": "RMBDXRpxZpk", "title": "리액트로 카운터앱 만들기3 - 컴포넌트" },
    { "id": "OU2ipfZzHE8", "title": "배열의 얕은복사와 깊은 복사" },
    { "id": "ruTuUbcNA0w", "title": "리액트로 배열 다루기 - 배열의 요소를 map을 이용해 JSX로 만들어 렌더링" },
    { "id": "o408xuUvpEg", "title": "리액트로 배열 다루기 - 배열의 요소를 추가하여 리렌더링. 이때 배열의 변경은 참조값이 변경해야 리액트가 변경으로 인식한다" },
    { "id": "0fPSeLswBYo", "title": "리액트로 배열 다루기 - 배열의 요소를 삭제하여 리렌더링. js 배열 함수들은 대부분 불변성을 위해 결과를 새로운 배열로 리턴한다. 이는 참조값도 달라짐을 의미." },
    { "id": "aca9FQn7qWM", "title": "리액트 카운터앱을 통해 본 Props   부모의 상태를 자식이 props로 받아서 부모의 리렌더링을 유발할 수 있다" },
    { "id": "NoJY8DcbGbU", "title": "리액트 카운터 앱을 통해 Props 의 개념 및 기능 확인" },
    { "id": "33vfmRnFkaQ", "title": "리액는 DOM을 관리해주기 때문에 개발자가 직접 document GetElement로 DOM 조작하면 안됩니다  리액트의 상태값과 연결된 제어 컴포넌트를 사용해주세요" },
    { "id": "xD4TS0rAwNY", "title": "실습 요구사항4 진행1" },
    { "id": "aYyp6XVLXTY", "title": "소지금에 따른 대중교통 이용 문제 풀이" },
    { "id": "HNS-fZRbcww", "title": "25 01 02, p 13907, 44강 - 객체간 커뮤니케이션은 위에서 아래로 단방향으로 해야 덜 복잡하다" },
    { "id": "IfN2bFdGwuY", "title": "스크롤 페이징" },
    { "id": "MpD4CUKsW3o", "title": "반응형" },
    { "id": "9KSdwlG1C_0", "title": "게시물 삭제" },
    { "id": "1W3e5A2Ptms", "title": "게시물 수정" },
    { "id": "7avoJ4REaJw", "title": "게시물 등록" },
    { "id": "SQSglzFjEls", "title": "Store24 발표 영상" },
    { "id": "UuxiyRpyqAs", "title": "어디갈래 발표 영상" },
    { "id": "aJEVEXl05a8", "title": "사람이 파일의 변경 이력을 일일이 저장하는 것은 비효율적이다. 이를 돕기 위한 프로그램이 git이다." },
    { "id": "eiFs-xmW8p0", "title": "기본적인 쉘 명령어와 git 레포지터리 생성" },
    { "id": "v-x9ng5i5Yk", "title": "삭제 명령어를 이용해 git 레포지터리 삭제해보기" },
    { "id": "z90HyujcWEI", "title": "git 브랜치는 작업을 저장하는 단위이다  기본 브랜치 이름을 바꿔보기" },
    { "id": "by-nhJNu-dE", "title": "파일과 폴더를 생성하고 지워보기" },
    { "id": "iwQlbzvJVMY", "title": "git status는 이전 작업과 현재 작업 사이의 차이를 보여준다" },
    { "id": "tVUjeP2ChqE", "title": "index를 거쳐 변경사항이 반영된 작업폴더 내역을 commit으로 저장할 수 있다" },
    { "id": "MNX6UcFNVRc", "title": "최근 작업 내역에서 또 다른 커밋해보기" },
    { "id": "ZdSyKalfvHc", "title": "git commit은 작업 이력을 저장하는 것이기 때문에 누가 작업했는지 알아야 함  유저 정보를 등록하는 방법" },
    { "id": "QIPAfc5Sdbk", "title": "지금까지 commit으로 저장한 이력들을 log로 확인한다" },
    { "id": "YYOiLdXOU2o", "title": "checkout을 이용하면 커밋간 이동할 수 있다" },
    { "id": "RXwIUuugiXk", "title": "github에 원격 레포지터리 만들기 로컬에 등록하기" },
    { "id": "59jElSkCzVA", "title": "pull을 이용해 원격 레포지터리의 이력을 불러오기" },
    { "id": "5BUCF0PY2ks", "title": "줄바꿈 문자를 이용하면 한 출력문 안에서 줄바꿈이 가능하다" },
    { "id": "laMshl53QYA", "title": "문자와 숫자 출력법이 다르며 이를 잘 구분하여 다양하게 출력 가능하다" },
    { "id": "CscmxG_rYx0", "title": "자바는 콘솔이라는 출력창에 System out print로 값을 출력한다" },
    { "id": "IYe8Uq8E6gU", "title": "주석은 사람이 알아보기 위한 문장이다  컴퓨터는 주석을 무시한다" },
    { "id": "gmPSymDCq8o", "title": "변수는 값을 저장하고 재사용할 수 있게 해주는 보관상자이다" },
    { "id": "lL0Zi2PQYyU", "title": "변수 사용시 알아야할 몇가지 사항" },
    { "id": "8u1q2udljqk", "title": "자바의 산술연산자, 비교연산자는 우리 상식에서 크게 벗어나지 않는다" },
    { "id": "FVRfmz94tb4", "title": "if를 이용해 조건문을 만들 수 있다  조건문은 원하는 코드만 실행시킬 수 있다" },
    { "id": "vNAHpXH9FGQ", "title": "조건문을 사용해서 날씨에 따른 인사물 출력하기" },
    { "id": "HjLzs0eskYg", "title": "if문 중첩으로 여러 조건을 동시에 만족시킬 수 있다" },
    { "id": "419qoviERjQ", "title": "else if와 else를 활용해 여러 조건중 하나만 실행되는 택일 구조를 만들 수 있다" },
    { "id": "ParzCyaT5Dk", "title": "while문은 무한 반복되는 if문이다  반복 조건을 제어하여 횟수를 조정할 수 있다 for문은 while의 가로 버전이다" },
    { "id": "vRGhar6PtbM", "title": "1부터 100까지 수중 짝수만 출력하기디버거 사용해서 한줄씩 실행하기" },
    { "id": "HdzQ_3V_ol4", "title": "이중 반복문을 이용해 100번 출력하기" },
    { "id": "fyGEqKhYxrc", "title": "이중 반복문을 이용해 구구단 2단부터 9단 만들기" },
    { "id": "t_da1CS8m5M", "title": "break와 continue로 반복문을 세밀하게 제어할 수 있다" },
    { "id": "iDvVgD-lHXw", "title": "배열을 사용하는 이유와 기본 사용법" },
    { "id": "7Xm3mbf5ZeM", "title": "배열에는 길이 정보를 얻어올 수 있는 length 속성이 있다" },
    { "id": "mDt_F4DPzKg", "title": "특정 길이의 배열을 만들어서 사용하는 방법" },
    { "id": "kWL56hyu1sk", "title": "스캐너를 이용하면 사용자가 키보드를 이용해 프로그램에 값을 전달할 수 있다" },
    { "id": "VZU1tP05tSk", "title": "스캐너를 이용해 문자열을 입력받는 것도 가능하다" },
    { "id": "eRtYxHL5R4w", "title": "Scanner 사용시 입력 버퍼 찌거기가 남으므로 nextLine으로 통일하고 숫자는 Integer parseInt를 사용하자" },
    { "id": "D6oqPjW5pig", "title": "명명 규칙을 간단히 되짚어 보자" },
    { "id": "MYAx3_8bo3I", "title": "이름 저장 프로그램 메뉴 분기 구현" },
    { "id": "wt41sUctPKI", "title": "이름 저장 프로그램 help와 exit 기능 구현" },
    { "id": "TQzoET5iPWY", "title": "변수는 변수가 만들어진 지역에서만 유효하다  다른 지역과 변수를 공유하려면 변수를 더 바깥지역에 만들어야 한다" },
    { "id": "isonqd9ZXTQ", "title": "일단 변수를 이용해 이름을 하나 저장하고 하나 출력해본다" },
    { "id": "WJ0lovyqGPA", "title": "배열을 도입하여 여러개의 이름을 저장할 수 있게 한다  이 때 배열의 저장 순서를 결정하는 index의 역할이 중요하다" },
    { "id": "iNkVicJ4r5g", "title": "나이를 저장할 수 있는 int 배열을 만들고 나이 정보를 추가" },
    { "id": "OsfKxQzzZVU", "title": "폴더를 활용하면 관련된 파일들을 좀 더 편하고 정확하게 다룰 수 있다" },
    { "id": "vLufZ8WAHJM", "title": "자바에서는 클래스와 객체를 사용하여 폴더 처럼 관련된 변수들을 묶을 수 있다" },
    { "id": "MkwcTrsS42o", "title": "class는 설계도이고 객체는 설계도로 부터 만들어지는 제품이라고 볼 수 있다  new 키워드를 통해 대량 생산할 수 있다" },
    { "id": "vASLCiIuR3M", "title": "객체는 크기가 커서 변수에 저장할 수 없다  대신 객체를 조종할 수 있는 작은 리모컨을 우리에게 제공하고 우린 그것을 변수에 저장할 수 있다" },
    { "id": "mFLquhhgIGk", "title": "변수가 객체의 상태를 나타낸다면 메서드는 객체의 동작을 나타낸다" },
    { "id": "GgLfDlaBEPI", "title": "매개변수를 도입하면 객체의 동작을 좀 더 다채롭게 표현할 수 있고 객체 자신이 가지고 있는 변수는 매개변수 없이도 활용 가능하다" },
    { "id": "BYBxnmlYMUo", "title": "메서드는 자신이 작업한 결과값을 리턴을 통해 자신을 사용한 쪽으로 줄 수 있다  리를 리턴값이라고 하며 함수의 결과값을 다양하게 2차 작업 할 수 있게 하기 위함이다" },
    { "id": "eKjiRtMk0A8", "title": "자판기 객체 프로그래밍   inputMoney 메서드 구현" },
    { "id": "6dG1IdqKqKI", "title": "자판기 객체 프로그래밍   selectBeverage 메서드 구현" },
    { "id": "z0X5UxEi5iQ", "title": "자판기 프로그램 기능 분기 완료" },
    { "id": "4iV490rIAHk", "title": "자판기 프로그램 돈 투입 기능 완료" },
    { "id": "SE9yQQm0-r0", "title": "자판기 프로그램 음료 목록 확인 완료" },
    { "id": "YqOdGk9ToSA", "title": "자판기 프로그램 음료 선택 기능 완료" },
    { "id": "-tTrfkD3Znw", "title": "자판기 프로그램 잔액확인이랑 종료 기능 완료" },
    { "id": "9yjyAa5_GcQ", "title": "자판기 객체 프로그래밍   수량 정보 추가" },
    { "id": "zAsRd2e1NvY", "title": "배열 삭제 구현 방법과 배열의 불편함" },
    { "id": "IGERX4j87iM", "title": "ArrayList와 배열 비교 및 사용법" },
    { "id": "f0KxkfAZV5E", "title": "배열이나 ArrayList는 전체 순회를 통해서 원하는 값을 찾을 수 있어야 한다" },
    { "id": "_M8lGGEbhHw", "title": "2개 이상의 데이터로 표현되는 사물이나 개념은 객체로 만들어서 ArrayList에 저장하면 더 간단하고 안정적으로 사용 가능하다" },
    { "id": "EZLpCX9Ppqk", "title": "이름 저장 프로그램 ArrayList 적용하기" },
    { "id": "mnMC8Ne-H0Q", "title": "자판기 프로그램 ArrayList 적용하기" },
    { "id": "VhhEQobW8Uk", "title": "연관된 2개 이상의 데이터는 객체로 묶고 객체를 ArrayList에 저장하는 것이 편하다" },
    { "id": "FyWm9mrkGgw", "title": "반복문 안에서 객체를 생성하고 ArrayList에 저장하는 방법" },
    { "id": "wiKnxylmznc", "title": "우리가 얻는 것은 객체 자체가 아니라 객체와 연결된 리모콘참조값이다  따라서 리모콘만 출력하면 리모콘값만 나온다" },
    { "id": "H2wVWNb4l-w", "title": "이름 저장 프로그램 객체 도입해서 ArrayList 하나만 사용하기" },
    { "id": "CYnkcTVVl1Y", "title": "생성자를 활용하여 객체의 데이터를 누락하지 않고 간단하게 저장하기" },
    { "id": "tJi5mmXJbzk", "title": "생성자를 이용해 Person 객체 활용 예제" },
    { "id": "rMl4QmvEIMM", "title": "자판기 프로그램 객체 도입하여 ArrayList 하나만 사용하기" },
    { "id": "hS9YuHaUTLU", "title": "햄버거 키오스크 햄버거 주문 추가하기 구현" },
    { "id": "cIFUHkPcKGk", "title": "오리시뮬레이션 예제를 통해 보는 오버로딩과 생성자 연쇄 호출" },
    { "id": "emwMkHSQYeg", "title": "상속은 중복을 해결해주는 훌륭한 도구지만 만능은 아니다  상속의 한계" },
    { "id": "N6uMyaodBFM", "title": "객체를 사용해 객체를 만드는 구성 방식은 중복을 해결하는 또하나의 좋은 도구이다" },
    { "id": "Z6dIpzcdK78", "title": "이순신 주식회사 예제를 통해 보는 구성 방식" },
    { "id": "ebyDjPKNrTo", "title": "구성 예제1 팔길이 문제 풀이" },
    { "id": "PG_jPxcG9cQ", "title": "숫자 타입으로 확인하는 자동형변환과 수동형변환 예제" },
    { "id": "QVDUA5ZmUwY", "title": "형변환 예제1 올바른 실수 연산 문제 풀이" },
    { "id": "gfHMXJpwGqc", "title": "객체 타입으로 확인하는 자동형변환과 수동형변환 예제" },
    { "id": "GBZXExt_3Ko", "title": "객체 타입 형변환에서 자식 객체가 부모 객체로의 변환은 안전하지만 반대가 위험한 이유" },
    { "id": "4iIFjqwrptA", "title": "이순신 주식회사에서 자바 개발자를 수월하게 교체하기 위해 형변환을 적용하는 예제" },
    { "id": "kuyaWTdRCmQ", "title": "요구사항1 종료 기능 exit 구현" },
    { "id": "pVUpmemmP7g", "title": "요구사항2 게시물 추가 기능 add 구현" },
    { "id": "A_GI6G7-Bs0", "title": "요구사항3 게시물 목록 조회 기능 list 구현" },
    { "id": "Z-OUkxbe7GI", "title": "요구사항 4 1 게시물 수정 기능 update 기능 구현" },
    { "id": "LR5ODeL01G8", "title": "요구사항 4 2 게시물 수정 기능 update 예외 처리" },
    { "id": "lytrKQGks-U", "title": "요구사항 5 1 게시물 번호 도입 및 삭제 기능 delete 구현" },
    { "id": "ZgVtLM0l2iU", "title": "게시물을 찾는 로직에 반복되는 부분이 있다  메서드로 재활용하기 위해 먼저 메서드에 객체를 주고 받는 방법을 알아보자" },
    { "id": "gG6iopIh85Y", "title": "메서드에서 객체를 만들어 리턴하여 다른 메서드에 전달 가능" },
    { "id": "jZuztKu5-S4", "title": "번호를 받아 해당 번호의 게시물을 찾아서 리턴 해주는 findPostById 메서드 구현" },
    { "id": "bn43F-Fni9I", "title": "findPostById에서 결과를 찾지 못하면 null을 리턴하여 예외처리 진행" },
    { "id": "D3SJGKxPfmk", "title": "main 메서드는 static 제약이 있어서 핵심 로직을 main 메서드에 작성하면 좋지 않다  일반 객체로 빼고 main은 스위치 역할만 시킨다" },
    { "id": "ZoPf7L0t27o", "title": "findPostById를 활용하여 상세보기 기능 detail 구현" },
    { "id": "5CzTZsIE-lU", "title": "자바의 현재 날짜 구하기를 chat gpt를 이용해 알아보고 게시물 등록 날짜에 적용" },
    { "id": "x8gR01wBXVo", "title": "편한 테스트 환경을 위해 테스트 데이터 생성  중복되는 부분은 메서드로 재활용성 높임" },
    { "id": "lXfIEhvMIt0", "title": "게시물 검색 기능 search 기능 추가" },
    { "id": "y6FyAEDR4Lo", "title": "게시물 기능의 각 기능들을 함수로 만들어 격리하면 함수끼리 서로 영향을 줄여 유지보수성을 높이고 가독성도 높일 수 있다" },
    { "id": "Xq39tTEo-SQ", "title": "프로그램 규모가 커지면 업무를 분담해야 한다  MVC 패턴을 적용하여 크게 3부분으로 나눈다" },
    { "id": "VXJLnQE1sWs", "title": "Model은 데이터와 관련된 역할을 부여 받는다  Model이 해야할 일들 재배치1" },
    { "id": "q2dLwYuVP5c", "title": "Model이 해야할 일들 재배치하기2" },
    { "id": "wboOBWKCDyE", "title": "View는 데이터를 보여주는 역할을 부여 받는다  여기서는 출력문을 활용한 부분이 View로 들어간다" },
    { "id": "2l4fqacWc_w", "title": "Controller는 View와 Model 사이를 중재하여 Model에게 받은 데이터를 View에게 넘겨준다" },
    { "id": "2jjG0RQsc9M", "title": "1차 미션 기능 시연" },
    { "id": "M-WItZJ4LTQ", "title": "미션 1   4 풀이" },
    { "id": "j9UbgYt25dY", "title": "미션 1   3 풀이" },
    { "id": "tELFONsN_tQ", "title": "미션 1   2 풀이" },
    { "id": "3tuJeSlze2s", "title": "미션 1   1 풀이" },
    { "id": "zVb3htf3GRk", "title": "미션1   기본 기능 소개" },
    { "id": "9rqGol4rk9A", "title": "redirection을 이용해 요청을 처리해 보기" },
    { "id": "4Agy5qVwZ5M", "title": "forwarding을 이용해 요청을 처리해보기" },
    { "id": "3ED0HRO-q9o", "title": "HTTP는 기억력이 없다. 고객을 일일이 기억하지 않는다" },
    { "id": "v02o9Sk3ONw", "title": "로그인 처리하고 로그인 유저에게 환영인사 하기" },
    { "id": "QK24s2_unaM", "title": "로그인 폼 만들고 테일윈드 이용하여 간단한 레이아아웃 배치" },
    { "id": "6VOW8CwAYhs", "title": "2차 미션 기능 시연" },
    { "id": "5inlgWnuChk", "title": "자바스크립트 기본 개념인 DOM과 Event" },
    { "id": "zEt0wPiNB9U", "title": "세션은 서버측 저장 기술이다  세션을 각 유저별로 지급되며 유저는 세션ID라는 쿠키로 구별한다" },
    { "id": "Zd6EJBztoiw", "title": "쿠키는 클라이언트에 의해 위변조가 가능  세션을 이용해 서버측에서 정보를 저장" },
    { "id": "61TRVsRTIzY", "title": "쿠키는 클라이언트에 의해 위변조가 가능  세션을 이용해 서버측에서 정보를 저장" },
    { "id": "ly7saxUAF8w", "title": "데이터 유지가 안되어 페이지 이동할 때마다 유저 정보가 사라짐  쿠키로 해결" },
    { "id": "pnskIM6Rgcg", "title": "레이아웃 적용으로 로그인 실습 환경 개선 및 유저 환영 인사 표출" },
    { "id": "0DKd4YR6LIE", "title": "각 기능에 쿠키를 검토하여 로그인 여부를 판단  로그인 유저의 경우 유저 정보를 템플릿에 보내준다  템플릿에서는 유저 정보 존재 여부에 따라 화면을 다르게 렌더링" },
    { "id": "dxmwruJaVZs", "title": "2차 미션 필수   2 풀이" },
    { "id": "ADo9AbtlXtI", "title": "1차 선택 미션   4 풀이" },
    { "id": "UzKUNvQ0o-s", "title": "1차 선택 미션   3 풀이" },
    { "id": "H_0JCmKfkgc", "title": "1차 선택 미션   2 풀이" },
    { "id": "cxppgBngbVw", "title": "1차 선택 미션   1 풀이" },
    { "id": "y19iJX_a7iw", "title": "미션2 - 필수 미션, url 규칙 정하고 노트북과 노트 기능 연동하기(노트 기능 리팩토링)" },
    { "id": "eYnJ41ye8jA", "title": "미션2 - 필수미션, 노트북 만들고 해당 노트북에 노트 만들기" },
    { "id": "35X6uy-6DOs", "title": "서브 노트 생성시 기본 노트 만들어지지 않아 발생하는 에러 해결 및 리팩터링" },
    { "id": "KR0IlgCfHfY", "title": "그룹 노트 선택했을 때 하위노트가 같이 선택되는 UI 문제 해결" },
    { "id": "qJtFZpNCriM", "title": "데이지 UI를 이용해 타임리프에서 그룹노트와 일반노트를 collapse 하게 그려주기" },
    { "id": "j-AT3qN5CFA", "title": "하위 노트 추가 기능 일단 데이터베이스에 하위노트 추가하기 성공" },
    { "id": "mYiVRM1nVJg", "title": "하나의 노트북 엔터티로 그룹 노트북과 일반 노트북의 개념을 표현하고 연관관계 매핑" },
    { "id": "qCl-3N_qUD8", "title": "필수 미션은 꼭 할 수 있어야 하고 선택미션은 할 수 있으면 좋습니다" },
    { "id": "3_vY4sdtZQQ", "title": "admin 관련 url에 대하여 필터 적용하고 권한 체크 기능을 필터에서 한번에 체크하기" },
    { "id": "KGWz0LW0Dhk", "title": "스프링부트에서 서블릿 필터 만들고 url을 등록하면 해당 url은 항상 필터를 거쳐간다" },
    { "id": "mteQgelvwow", "title": "권한을 이용해 기능을 차별적으로 제공할 수 있다  관리자 유저와 일반 유저를 구별하여 기능 제공하는 예제" },
    { "id": "yJg45WXRtY0", "title": "로그인 체크나 권한 체크는 거의 모든 기능에 들어간다  이 체크 프로세스를 기능마다 구현하는 것은 힘들다  필터를 이용하면 한곳에서 한번에 처리 가능하다" },
    { "id": "tR-GUCBWu1o", "title": "세션 저장소에 회원의 정보를 저장해 놓고 사용하기 때문에 세션을 파기하면 회원 정보는 초기화되고 이를 이용해 로그아웃을 구현할 수 있다" },
    { "id": "i6dQF6HfdK0", "title": "로그인 체크 필터와 관리자 권한 체크 필터를 따로 적용하고 순서 부여하기" },
    { "id": "OJqoAdyfSQI", "title": "인증 필터에서 로그인 요청을 가로채 프로세스를 진행하도록 구현" },
    { "id": "beoGnsTXOTY", "title": "인증 관련 작업을 모듈화하여 사용해보기  그러기 위해서는 필터를 사용해서 로그인 요청을 가로채야 한다" },
    { "id": "GHHo9qegLNg", "title": "3차 미션 시연 영상" },
    { "id": "R3WPQF-U6RI", "title": "3 redirect uri를 이용해 인가 코드를 받아서 처리" },
    { "id": "Z43nhkVoHXk", "title": "2 리소스 오너의 인증 요청을 리소스 서버의 인증 서버로 리다이렉트하여 로그인 페이지 보여주기" },
    { "id": "nqb2ORFxCgo", "title": "1 카카오 로그인 링크가 포함된 로그인 페이지 제공" },
    { "id": "Aa6oqanyOHY", "title": "카카오 로그인을 구현하기 위한 설정 및 준비" },
    { "id": "TxqVErgE0vU", "title": "WebClinet를 이용해 외부 API와 통신해서 데이터 가져오는 예제" },
    { "id": "y7YZLWlewa0", "title": "FilterRegistraionBean에서는 Bean을 이용해 서블릿 필터를 구성할 수 있다  이를 이용해 DB 인증 방식 구현하고 적용" },
    { "id": "B13gtJkit9g", "title": "DB 인증 방식 프로세서를 만들기 위해 JPA 설정하고 테스트" },
    { "id": "jJQE_BhReWA", "title": "메모리 인증 방식을 캡슐화하여 필터에 적용  DB 인증 방식을 적용하기 위한 밑그림" },
    { "id": "gbTFr8vOhNQ", "title": "7 Oauth2 필터와 인증 프로세서를 만들고 모듈화 작업" },
    { "id": "Ly38mQs_me0", "title": "6 세션에 인증 정보를 저장해서 소셜 로그인을 완료" },
    { "id": "2FtuXZsfTec", "title": "5 받은 ACCESS TOKEN을 이용해 사용자 정보 가져오기  동의 항목과 회원번호인 ID가 넘어온다" },
    { "id": "Q5Kl9fVWOgw", "title": "4 인가 코드를 이용해 토큰을 받아 인증 완료하기" },
    { "id": "HP0C9ITl3IY", "title": "노트북 삭제 기능 구현  외래키 제약 때문에 삭제 순서가 중요하다. 정석적인 방법으로 삭제 구현 해보고 이후에 JPA cascade를 이용한 쉬운 구현을 해본다." },
    { "id": "_xqG7z6CgNc", "title": "그룹 노트 관련 코드를 다른 브랜치에서 가져와 merge하고 충돌 처리" },
    { "id": "YNOAKfFCJnU", "title": "노트와 노트북 데이터를 메인 데이터로 묶어서 재활용성을 높임" },
    { "id": "PSX3n3C_lPc", "title": "두 서비스가 서로를 참조하면서 순환참조 문제 발생.  서비스 그룹을 만들어서 해결" },
    { "id": "LgI5gTp2DV8", "title": "노트북 도메인 의존성 관리 리팩토링" },
    { "id": "h8gaABH-vO0", "title": "노트 삭제 기능 구현.  외래키 제약 때문에 삭제 순서가 중요하다. 정석적인 방법으로 삭제 구현 해보고 이후에 JPA cascade를 이용한 쉬운 구현을 해본다." },
    { "id": "eY2iy4e4Lw4", "title": "노트 도메인 의존성 관리 리팩토링" },
    { "id": "PSTZUZL7m_s", "title": "정책적으로 의존성 관리 규칙 정하고 이에 맞게 개발해야 좀 더 관리가 편해진다" },
    { "id": "8RS1hIuly0E", "title": "기능을 개발하다보면 객체간 의존성이 생길 수밖에 없고 이는 큰 이슈이다" },
    { "id": "wcmbNgZoj6o", "title": "springboot oath2 client 추가하고 google관련 설정하기" },
    { "id": "xV0Z0Hi1Qk4", "title": "노트북 이동 기능 구현" },
    { "id": "WD7YwBUUGHc", "title": "노트북 이동 모달 그려주기" },
    { "id": "9S8lZCsw3jg", "title": "소셜 로그인 페이지 등록하고 실제 소셜 로그인 해보기" },
    { "id": "7sqB54zKOiU", "title": "재귀 호출로 그룹 노트북과 서브 노트북 목록 그리기" },
    { "id": "dnZ6T2Sh2tA", "title": "타임리프에서 특정 엘리먼트를 조각화함수화하여 사용하기.  추후 재귀를 위한 밑그림" },
    { "id": "GTSLZs2Lh50", "title": "에디터가 처음 그려질 때 해당 노트의  내용이 나오도록 적용" },
    { "id": "68GsLAh0Xj4", "title": "에디터의 내용을 데이터베이스에 저장하는 것까지 성공" },
    { "id": "lQP93-rcZPc", "title": "토스트 UI 에디터 도입하고 적용" },
    { "id": "14ia1FhcPpo", "title": "미션4 시연영상1" },
    { "id": "UgRMdxyCZJs", "title": "미션4 시연영상2" },
    { "id": "TClolQn83AE", "title": "태그에 해당하는 노트 리스트만 출력하기" },
    { "id": "LMrsr9EtJEg", "title": "태그 목록 모달 창을 유지하면서 선택한 태그 표시하기" },
    { "id": "wwb49Nv7fus", "title": "노트 태그 추가 기능 완료" },
    { "id": "n0wPwZ2JJ64", "title": "노트 태그 목록 보여주고 클릭하면 제거하도록 구현" },
    { "id": "HXnDT1zcIh0", "title": "노트는 여러개의 태그를 가질 수 있고 태그도 여러개의 노트를 가질 수 있다.  노트 태그와 태그를 추가하고 노트와 태그의 연관관계를 매핑한다" },
    { "id": "EX-GDwXruRI", "title": "main 페이지에 코드가 많아지면서 정리가 필요해짐. 조각페이지를 이용해 정리" },
    { "id": "vlAkNBbvYpE", "title": "모든 Post 요청이 기본 파라미터로 세팅됨  콜백을 이용해 파라미터 커스터마이징하고 이미 존재하는 파라미터는 생성에서 제외" },
    { "id": "JNJhEPJH0LE", "title": "모든 요청이 기본 파라미터로 세팅이 되어 내가 원하는 방식으로 파라미터가 유지되지 않음.  콜백 함수를 이용해 파라미터 커스터마이징 추가" },
    { "id": "mDoaQ3zc7pc", "title": "Get 요청의 경우 보통 a태그를 사용한다  해당 a 태그를 가져와 파라미터를 동적으로 만들어서 전송" },
    { "id": "_qxlzRMcpRg", "title": "Post 요청의 경우 form 전송을 한다.  해당 form들을 가져와 자바스크립트로 파라미터를 동적으로 생성하여 전송" },
    { "id": "cT7cuyf5xls", "title": "자바스크립트로 가져온 input태그들의 name과 value를 이용해 params 객체 만들고 반환하는 함수 완성" },
    { "id": "vCvrkQCTlzI", "title": "특정 영역에 파라미터를 input 태그로 모아두고 자바스크립트를 이용해 가져오기" },
    { "id": "FqQlmTrzz5M", "title": "추가 및 삭제 등 여러 기능에서 파라미터 소실 현상 발생.  모든 기능에 파라미터를 세팅하여 파라미터를 유지하기" },
    { "id": "L7tZncVtFhE", "title": "노트 정렬 기능 구현" },
    { "id": "z27dwudRi9k", "title": "URL에 한글이 포함되어 잘 작동하지 않는 문제 발생.  URL 인코더를 이용해 인코딩하여 해결" },
    { "id": "WSzGY_WHKP4", "title": "컨트롤러의 리다이렉트 부분에서 파라미터 소실 문제 발생.  url에 파라미터를 붙여서 리다이렉트 하는 기능 추가" },
    { "id": "xjNlOmEsf5Y", "title": "paramHandler 도입하고 노트북이나 노트 눌렀을 때 에러 발생.  기본값을 설정해서 해결" },
    { "id": "VlNGMJP5cfU", "title": "ParamHandler를 이용해 파라미터를 좀 더 효율적으로 관리하기" },
    { "id": "Dby6TbyJb1U", "title": "노트북이나 노트를 눌렀을 때 키워드 파라미터가 사라지는 현상 수정" },
    { "id": "81RexY7eG88", "title": "검색 기능을 실행했을 때만 모달 유지하도록 반영" },
    { "id": "m8q7MKKKTJs", "title": "검색 기능 UI 간단하게 꾸미기" },
    { "id": "umB5Jq-lAgY", "title": "기본적인 검색 기능 구현" },
    { "id": "NrMUyA47gdU", "title": "네이버 소셜 로그인 구현" },
    { "id": "QoyycJB81yY", "title": "카카오 소셜 로그인 구현" },
    { "id": "UMXucrWqmO4", "title": "각 소셜 서비스에 맞게 유저 정보를 꺼내서 회원가입 구현" },
    { "id": "LMbwS4mAK84", "title": "소셜 로그인시 회원 정보를 DB에 저장하기 위해 DefaultOAuth2UserService를 구현해야 한다" },
    { "id": "ubDNL29yXwg", "title": "구글 소셜 로그인 회원가입 처리" },
    { "id": "ps570TaBxTs", "title": "태그별 노트 목록 보여주기 위해 태그 모달창을 만들고 UI 꾸미기" },
    { "id": "rkMpUHiqI_w", "title": "미션4 카카오와 네이버 소셜 구현" },
    { "id": "dHGHMUWnJu4", "title": "미션4 소셜 회원 DB 저장 시연" },
    { "id": "LNoLK3WqwCE", "title": "미션4 태그 기능 시연" },
    { "id": "2yc5Of0Rg3g", "title": "미션4 노트 정렬 기능 시연" },
    { "id": "lNVnadETPH8", "title": "미션4 검색 기능 시연" },
    { "id": "snuC2MdW4UI", "title": "미션5 필수 - 엔터티 List를 DTO List로 변환하여 검색 결과가 직렬화 과정에서 순환참조에 빠지지 않게 한다" },
    { "id": "BpcJF4NzJq4", "title": "미션5 필수 - 엔터티는 연관관계를 끊을 수가 없다.  엔터티의 분신인 dto를 만들어 연관관계에서 자유로워질 수 있다" },
    { "id": "AEx1bhPbC3I", "title": "미션5 필수 - JSON 객체 직렬화 과정에서 양방향 관계 엔터티는 서로를 순환참조 하기 때문에 직렬화 실패를 하게 된다.  DTO를 도입하여 해결한다" },
    { "id": "7YHgcH35nZg", "title": "미션5 필수 - fetch로 서버와 통신하기 성공" },
    { "id": "0B0rkDzpBfw", "title": "미션5 필수 - 매번 html 문서를 서버로 부터 받아 렌더링하는 것은 비효율적이다  데이터만 요청해서 받아 자바스크립트로 화면의 필요한 부분만 고칠 수 있다" },
    { "id": "LvkIuSKwKxc", "title": "5 필수 미션 시연 영상" },
    { "id": "ohqNPlhExuQ", "title": "5 선택 미션 시연 영상" },
    { "id": "2xnakqr1m3s", "title": "fetch는 비동기 통신이므로 항상 코드의 순서대로 실행된다는 보장이 없다.  항상 then 안에서 작업하는 것을 잊지 말자" },
    { "id": "MLVvcQdXSy4", "title": "fetch를 이용하면 다른 서버에서 데이터를 요청해서 받아올 수 있다" },
    { "id": "PI16v9UZeXo", "title": "백틱을 이용하면 html 구조를 최대한 유지하면서 자바스크립트를 적절하게 적용시킬 수 있다" },
    { "id": "Y3I0qWHf4ys", "title": "기본 동작이 정해져 있는 객체는 preventDefault를 이용해 기본동작을 막을 수 있다" },
    { "id": "V2dALu6iHow", "title": "각 엘리먼트에 특정 이벤트에 따른 동작을 정의할 수 있다. eventListener라고 한다" },
    { "id": "Xl-H0v--wdo", "title": "자바스크립트에서 특정 엘리먼트에 접근할 수 있는 방법으로 getElement 시리즈와 css 선택자를 이용한 querySelector가 있다" },
    { "id": "ZJZacHXBIr0", "title": "자바스크립트 객체는 때로는 문자로 처리되어야 할 때가 있다 . 직렬화와 역직렬화로 문자와 객체를 넘나들 수 있다" },
    { "id": "MXa2rHOzMGE", "title": "자바스크립트의 객체는 JSON이라고 불리우며 여러 데이터를 구조화해서 저장할 수 있다" },
    { "id": "6vxAj6XeBNE", "title": "map은 forEach와 비슷하지만 작업된 결과를 새로운 배열로 반환한다는 점이 다르다" },
    { "id": "Z0CF0Sm-vqg", "title": "forEach를 이용하면 배열의 요소를 순차적으로 꺼내서 처리할 수 있다.  이때 익명함수를 사용하면 편하다" },
    { "id": "fg5JW3yJ43s", "title": "변수는 스코프와 불변성에 따라 var, let, const로 구분되며 const가 가장 권장된다" },
    { "id": "tRDrEtA9BSI", "title": "console log로 다양한 값을 출력해 볼 수 있다.  typeof 함수는 타입이 없는 자바스크립트에서 유용하다" },
    { "id": "TdD5CDaYSeg", "title": "함수는 이름을 가진 네임드 함수와 이름을 가지지 않은 익명함수 두가지로 사용 가능하다" },
    { "id": "07BqrjgTh2A", "title": "자바스크립트를 이용해 html 문서 그려보기" },
    { "id": "Jp0GKr4_F6Y", "title": "자바스크립트는 브라우저(자바스크립트 엔진)에 의해 실행된다" },
    { "id": "rPfqwWGvyBU", "title": "2차 프로젝트 - 매칭 앱 ARAQ" },
    { "id": "gwiMD3gbAKY", "title": "2차 프로젝트 - 인스타그램 모작" },
    { "id": "yZYwR0UeBdo", "title": "오리시뮬레이션 구성 방식 구현 개선 버전" },
    { "id": "Bho2fZGmTT8", "title": "오리시뮬레이션 구성 방식 구현" },
    { "id": "NOR_WpLTaEs", "title": "생성자와 메서드는 파라미터의 개수와 타입만 다르면 같은 이름으로 여러개 만들 수 있다  이렇게 하는 이유는 하나의 함수를 유연하게 확장할 수 있기 때문이다" },
    { "id": "X6CgAPnbe0s", "title": "상속을 통해 만들어지는 객체는 부모 객체를 바탕으로 확장해서 만들어지기 때문에 부모 생성자가 먼저 호출되고 내 생성자가 호출되는 생성자 연쇄호출이 일어난다" },
    { "id": "aBHE1qu9TkQ", "title": "서식문자를 이용한 printf를 사용하면 문자열 내에 원하는 위치에 원하는 값을 바인딩 할 수 있다" },
    { "id": "sZGaUiWLj6U", "title": "객체는 올바른 데이터 세팅이 반드시 필요하며 이를 누락하지 않도록 하기 위해 객체 생성시 반드시 실행되는 생성자 메서드를 사용한다" },
    { "id": "7O0X-mwL-L8", "title": "기본생성자는 직접 만들지 않아도 자바가 자동 생성해주지만 사용자가 직접 생성자를 만든다면 더이상 만들어주지 않는다" },
    { "id": "ZYel6l_5d5U", "title": "TV예제   부모의 메서드와 변수를 물려받아 변수 값만 바꿔서 해결하는 버전" },
    { "id": "cDPPrpij6pA", "title": "자바에서는 특별한 이유가 없으면 변수와 함수에 private을 붙인다  접근이 필요한 경우에는 게터와 세터를 이용한다" },
    { "id": "Mmg9wfRlcNg", "title": "인스턴스 변수를 외부로부터 보호하기 위해 게터와 세터를 이용해 간접 접근한다" },
    { "id": "wRJpxAa0RJU", "title": "텍스트 게시판 요구사항3   list 명령어로 게시물 목록 확인하기  이때 ArrayList를 사용하면 편하다" },
    { "id": "oiQ7F9NRh6A", "title": "텍스트 게시판 요구사항2   add 명령어를 이용해 게시물 추가하는 기능 만들기" },
    { "id": "XX0T_DGEXWw", "title": "텍스트 게시판 요구사항1   무한 명령어 입력과 exit 기능으로 기본 구조 잡기" },
    { "id": "4DAaZv4VSbo", "title": "프로젝트 소스코드 관리를 위해 git레포지터리 생성하고 github 원격레포지터리에 연결" },
    { "id": "gZB3QCc8gMM", "title": "텍스트 게시판을 만들기 위한 프로젝트 생성과 세팅" },
    { "id": "HAbcap1VRL8", "title": "배열의 고정 길이 단점을 보완한 동적 배열 ArrayList가 강력하고 사용하기 편하다" },
    { "id": "OHB5JFVRwbE", "title": "입력 버퍼 때문에 입력이 꼬일 수 가 있다  입력 버퍼를 비워주거나 찌거기가 남지 않게 nextLine으로 통일해준다" },
    { "id": "U8O-AWXcn0E", "title": "Scanner를 이용하면 키보드를 이용해 프로그램에게 값을 전달할 수 있다" },
    { "id": "O1Sx4CutDxc", "title": "ArrayList를 이용해 객체를 처리하는 예제" },
    { "id": "_voz4CzCJis", "title": "접근제어자는 특정 자원에 대해 접근할 수 있는 권한을 설정한다" },
    { "id": "4u0QHZSOYq0", "title": "update, delete 와 비슷하게 findIndexById를 활용하여 detail 기능 구현" },
    { "id": "2l2bXSm2AFU", "title": "update나 delete 기능에서 없는 게시물을 입력하면 에러가 난다  에러가 나지 않게 예외처리를 해준다" },
    { "id": "BxTNZnlVT1g", "title": "텍스트 게시판 요구사항5   게시물 정보가 따로 노는 것을 막기 우해 Article class를 생성하고 게시물 정보를 묶어서 관리한다" },
    { "id": "J3PY9yEyN_U", "title": "index를 찾아주는 findIndexById 함수를 만들어 코드를 재활용하고 가독성을 높인다" },
    { "id": "x4QIv-0Ve7c", "title": "텍스트 게시판 요구사항5   게시물 저장 방식이 바뀌었기 때문에 update도 같이 수정해줘야 한다" },
    { "id": "bww_CFjFWbA", "title": "텍스트 게시판 요구사항5   번호를 유지하기 위해 번호 데이터를 직접 저장" },
    { "id": "qx8jaHnkCBs", "title": "텍스트 게시판 요구사항5   내가 원하는 게시물이 번호가 몇번째 인덱스에 저장되어 있는지 확인하기 위해 ArrayList 순회" },
    { "id": "bgo_nFABXrg", "title": "텍스트 게시판 요구사항5   한 게시물의 정보인 번호, 제목, 내용을 따로 저장하면 실수할 확률이 높아지고 데이터 관리가 어렵다" },
    { "id": "gK7YPuV-mFI", "title": "텍스트 게시판 요구사항4   게시물 번호를 인덱스와 연결하여 구현하는 방식" },
    { "id": "pSIY3uRhQoE", "title": "텍스트 게시판 요구사항4   수정 구현에 앞서 미리 핵심로직을 main 함수에서 분리" },
    { "id": "f-cH1l8z3k4", "title": "코드를 한 함수 안에 작성하면 가독성이 좋지 않고 주변에 영향을 미칠 수 있다  각 기능을 함수화 하여 격리하면 유지보수성을 높일 수 있다" },
    { "id": "hpqVWwY7e9Q", "title": "검색 기능 구현시 출력 코드 중복되는 것 함수로 해결" },
    { "id": "tiM4l0FNeN8", "title": "검색 기능 추가  String의 contains를 이용하면 문자열에 특정 키워드의 포함 여부를 확인 할 수 있다  중복되는 코드는 함수를 활용하여 없애줘야 한다" },
    { "id": "zomMGguhG_Q", "title": "조회수 기능 추가  Article 객체에 조회수 증가 함수를 추가" },
    { "id": "aaQqrPMG6t8", "title": "LocalDateTime을 이용해 현재날짜와 시간을 구할 수 있다  DateTimeFomatter로 형식도 바꿀 수 있다  chatgpt를 활용하면 이를 쉽게 할 수 있다" },
    { "id": "hIeIaUKR850", "title": "기능을 테스트할 때마다 데이터를 생성해야 하는 불편함이 있다  미리 테스트 데이터를 넣어 놓으면 편하다" },
    { "id": "mSRNHxtAjnw", "title": "Exception 개념 및 핸들링 방법" },
    { "id": "KmNx-IKYkmo", "title": "게시물 선택시 숫자가 아닌 문자를 입력하면 예외가 발생하고 프로그램이 강제 종료된다  try catch로 핸들링하여 막을 수 있따" },
    { "id": "fHH8xIsVZys", "title": "if를 switch로 대체할 수 있다  switch를 여러 경우의 수를 따져 선택해야 할 때 사용하면 가독성도 좋고 성능적 이점도 얻을 수 있다" },
    { "id": "oYuP1OJxyz8", "title": "findIndexById 함수의 편의성을 개선해서 findArticleById로 리팩토링" },
    { "id": "P41D3A3ZJ-8", "title": "SQL 기초2 테이블 생성 및 데이터 추가와 조회" },
    { "id": "oOFn8uxs0iQ", "title": "MySQL 설치 및 세팅" },
    { "id": "f-CLSSXF5j8", "title": "SQL 기초1 데이터 베이스 생성 및 삭제" },
    { "id": "NEIJpqA0Qro", "title": "핵심 용어 간단 정리" },
    { "id": "obnf3l9g7Nw", "title": "MySQL 시작" },
    { "id": "Cqhm290FLas", "title": "MVC 패턴 적용 완료  ArticleRepositoryModel, ArticleViewView, ArticleControllerController 분리하여 리팩토링  유지보수성과" },
    { "id": "0UzIv0ebgrM", "title": "MVC 패턴 적용  ArticleRepository와 ArticleView, CommonUtil을 만들어 각각 코드를 분리" },
    { "id": "ijb1ubEpJtg", "title": "MVC 패턴의 개념 및 필요성 그리고 프로젝트에 적용하기 - articleRepository로 모델 역할 부여. 아직 미완." },
    { "id": "Nw_RfAxYrMA", "title": "SQL 조회 연습 - 조건 함수 if와 case의 활용" },
    { "id": "GSk8cazmcKY", "title": "SQL 조회 연습 - 집계함수 사용시 주의할 사항과 최소한의 검증이 필요한 이유" },
    { "id": "fl-hsvxKfnQ", "title": "SQL 조회 연습 - 숫자 함수 사용법과 집계함수 비집계함수의 차이" },
    { "id": "3Z5YD07HONs", "title": "SQL 조회 연습 - LIKE를 이용한 문자열 포함 여부 검색" },
    { "id": "C6usSCP5Hb8", "title": "SQL 조회 연습 - 기본 연산자 사용법" },
    { "id": "dGOEh4pgk5g", "title": "SQL 조회 연습 - 정렬하기" },
    { "id": "g4hoZ1ouslE", "title": "사실 테이블의 pk나 제약등은 설계할 때 거의 결정되어 테이블 생성시에 반영되어야 한다" },
    { "id": "PwpbJXdjEM0", "title": "MySQL 기초 4-2 - 식별자 데이터가 제대로 작동되게 하기 위해 제약사항 추가하기" },
    { "id": "m6MAWD0vjjk", "title": "MySQL 기초 4-1 - 식별자 데이터 Primary key의 필요성과 그 특성" },
    { "id": "SQhTQHjFPU0", "title": "MySQL 데이터 타입의 의미와 중요성" },
    { "id": "YPgJTxMEZys", "title": "MySQL 기초3 - where 필터링" },
    { "id": "KGkAfbeH70A", "title": "MySQL 2,3강 복습" },
    { "id": "l0xDRl1gt_o", "title": "짝이 있는 인싸INNER들 말고 짝이 없는 아싸OUTER들도 파티에 참가할 권리는 있다 아싸OUTER들도 챙기는 아우터 조인" },
    { "id": "3pC5v_vMT2I", "title": "분리된 테이블을 하나로 합쳐서 보는 방법 - 조인" },
    { "id": "n_PLCkqIMeg", "title": "테이블 하나에 모든 데이터를 넣어서 데이터가 중복되면 발생하는 이상현상들 예시" },
    { "id": "IywUTlZ0w8E", "title": "쇼핑몰 예제   테이블 한개일 때 버전" },
    { "id": "fQP3UPqTUXs", "title": "단순 중복 제거는 distinct, 중복을 그룹별로 묶고 그룹별 집계를 할 때는 group by를 사용한다" },
    { "id": "bVuCvzHJv-I", "title": "group by 할 때 다수의 컬럼으로 그룹핑할 수도 있다" },
    { "id": "DaN9ySE2nn4", "title": "todo2   json 파일에 저장된 게시물 데이터를 읽어와 ArrayList에 담고 list 명령으로 출력하기" },
    { "id": "-LHUvA8xIaM", "title": "todo1   add명령으로 입력받은 제목과 내용을 바탕으로 게시물을 만들어 json파일로 저장하기" },
    { "id": "SlUxq-z2Ezw", "title": "자바 영속성 구현 이전에 파일 입출력에 대해 간단히 알아보고 연습하기  이때 chatgpt를 십분 활용하자" },
    { "id": "0ayPKXy2pHA", "title": "파일 영속성 버전의 repository와 controller 구성하기" },
    { "id": "KSG0ImnBy1Q", "title": "chatgpt와 구글링을 이용해 파일을 json으로 저장하는 코드를 확보하고 프로젝트에 적용하기" },
    { "id": "GoPEfb0Wr7c", "title": "책 뒤에 인덱스를 이용해 페이지를 빨리 찾듯이 DB에서도 인덱스를 사용하면 검색 속도를 향상시킬 수 있다" },
    { "id": "JX0kCd5lP9Y", "title": "강사의 레포지터리를 클론하는 방법" },
    { "id": "KYj7iMJMPl0", "title": "서브쿼리를 이용하면 직관적이고 유연하게 sql 작성이 가능하다  다만 성능이 조인보다 떨어지므로 가능하다면 조인을 사용하자" },
    { "id": "I8B8HcyET-c", "title": "서브쿼리를 사용하여 having을 사용하지 않고 풀기" },
    { "id": "8oqN4zETR5g", "title": "JDBC를 이용해 특정 게시물을 수정하기" },
    { "id": "ZRntw-l8ubI", "title": "JDBC를 이용하면 자바를 이용해 DB를 다루는 일관된 방법을 익힐 수 있다  JDBC를 이용해 MySQL에 게시물 데이터 저장하기" },
    { "id": "wpzr0MtZeEk", "title": "자바 프로그램에서 DB를 사용하기 위해 먼저 MySQL에 데이터베이스와 테이블을 만든다" },
    { "id": "w_Jw61ge98M", "title": "ArticleRepository와 ArticleFileRepository를 Repository Interface로 사용법을 일치시켰다  따라서 두 객체를 교체하기가 용이하다" },
    { "id": "Tmayqqi2eMA", "title": "Auto Import와 Lombok을 이용한 게터세터의 자동 생성등으로 개발 편의성을 높인다  모든 메서드가 추상메서드인 추상클래스는 interface로 만들면 더 편하다" },
    { "id": "hGUlC4OhR1c", "title": "Model 객체를 교체할 때마다 메서드 이름이 다르면 코드 수정이 불가피하기 때문에 메서드 이름을 강제로 통일시켜야 한다  이를 위해 추상메서드를 활용하여 오버라이딩을 강제한다" },
    { "id": "r-gnQ-iQ0VE", "title": "ArticleRepository와 ArticleFileRepository의 메서드 이름이 달라서 교체시 코드 수정이 불가피한 경우가 있을 수 있다" },
    { "id": "wPTFEUIjVnM", "title": "todo 5, 6  - 게시물 번호를 이용해 해당 게시물을 수정하는 기능과 특정 키워드를 포함한 게시물 검색 구현" },
    { "id": "hjRyjPqck64", "title": "todo3 - 게시물 번호를 이용해 해당 게시물 찾는 findById 함수 구현" },
    { "id": "Shvju5BcC3c", "title": "JDBC ResultSet에서 데이터 꺼내는 방법을 이해하고 findAll 구현하기" },
    { "id": "sgvqgWmSlVs", "title": "JDBC를 이용해 특정 게시물 삭제하기" },
    { "id": "RgPyU3ThAd8", "title": "텍스트 게시판 만들기 기본형 add, list" },
    { "id": "z183UurTkdU", "title": "텍스트 만들기 기본형   update, delete, detail" },
    { "id": "eBZImZMJ_sQ", "title": "텍스트 만들기 함수화 및 View 적용" },
    { "id": "IzWITUFxHKw", "title": "요소를 정렬하는 다양한 방법  텍스트와 inline 요소는 text align, block 요소는 margin으로 정렬합니다" },
    { "id": "eQ4vW37ITBk", "title": "다양한 선택자로 내가 원하는 태그를 선택해서 조작할 수 있다" },
    { "id": "lJV7rndUg0o", "title": "HTML CSS 기본 개념 및 실습 방법" },
    { "id": "EPDRzJ5G9sg", "title": "display 속성 inline과 block의 개념 및 사용법" },
    { "id": "e_ae5a0dipM", "title": "일관된 디자인을 위해 태그의 기본적인 디자인을 제거하는 노말라이즈 작업 진행" },
    { "id": "dZOfjClRil4", "title": "스프링부트 기본 개념과 세팅법" },
    { "id": "nhc1VJFHpzE", "title": "search 구현" },
    { "id": "Wroaru8JJjk", "title": "타임리프를 이용하면 html에서 프로그래밍을 할 수 있다  타임리프 변수와 출력 사용법" },
    { "id": "mypeSwaIOzs", "title": "HTML 코드는 분리되어야 좋습니다 분리된 html 코드는 타임리프라는 템플릿 엔진에 의해 온전한 형태로 완성됩니다" },
    { "id": "6bFMI5YrK2M", "title": "스프링부트와 코드펜을 이용해 간단한 로그인 기능 만들어 보기" },
    { "id": "s-SqI38Dg-s", "title": "스프링부트 함수에 파라미턴 전달하고 받는법" },
    { "id": "kvGlHXBAU34", "title": "다양한 input 태그와 form태그 활용하여 url 파라미터 세팅하기" },
    { "id": "3ON8bmmBRs4", "title": "html을 만들어서 리턴해보기" },
    { "id": "zPfGZ5j7FeI", "title": "스프링 부트를 이용해 다양한 리턴값을 브라우저에 출력해보기" },
    { "id": "FVIfTjSI0D4", "title": "텍스트 게시판 스프링 적용하기2  update" },
    { "id": "fQdXjNxmJdM", "title": "add와 list 기능을 스프링부트 적용하여 만들기" },
    { "id": "3xO0eQwak90", "title": "텍스트 게시판 코드 스프링부트로 옮기고 컨트롤러로 실행해보기  왜 MVC를 써야하는지 알 수 있다" },
    { "id": "8RON0ktH3HI", "title": "컨트롤러에서 타임리프로 데이터 넘기고 사용하는 법" },
    { "id": "_YD_GULgFxs", "title": "타임리프 조건문과 반복문" },
    { "id": "ywgIkrtS5m0", "title": "파인다이닝" },
    { "id": "8CvkmPOUpAY", "title": "UMMI" },
    { "id": "iko3-_7raEE", "title": "맞찾사" },
    { "id": "Ut7vpOmEEpk", "title": "텍스트 게시판 스프링 적용하기4 detail" },
    { "id": "Go_HzkaJkO0", "title": "텍스트 게시판 스프링 적용하기3 delete" },
    { "id": "VoDYH636Uik", "title": "자원의 정보를 url에 편입하고 컨트롤러에서 @PathVariable로 받기" },
    { "id": "EbqrvvxQZ00", "title": "delete 기능에 템플릿 적용" },
    { "id": "eQVcvn79vAs", "title": "스프링부트에서는 @GetMapping과 @PostMapping을 이용해 Get과 Post를 구별해서 요청을 처리할 수 있다" },
    { "id": "WAgJG0_0hwk", "title": "detail 기능에 템플릿 적용" },
    { "id": "-jrV8eCJjm8", "title": "GET 메서드는 데이터를 가져올 때만 사용한다  데이터 반영은 POST로 한다" },
    { "id": "BiDTThNDHWs", "title": "URL과 결과 화면이 일치해야 한다  스프링에서 url을 바꾸려면 redirect를 사용하면 된다" },
    { "id": "kedCLOSbbsM", "title": "add 기능에 템플릿 적용" },
    { "id": "6cKmXRhcCaE", "title": "list 기능에 템플릿 적용" },
    { "id": "Vw9AlFtWiv4", "title": "update 기능 템플릿 적용" },
    { "id": "qT9MMWlTV2w", "title": "스프링부트 게시판에 DB 연동" },
    { "id": "_8cDotfOg7c", "title": "영속성 컨텍스트의 1차 캐시 존재를 sql로 확인해 보자" },
    { "id": "5st2sUkvXco", "title": "계좌이체 예제로 보는 DB 트랜잭션. 트랜잭션은 하나의 작업(업무) 단위이다.  그 안에서 db처리는 모두 성공하거나 모두 실패해야 한다" },
    { "id": "u0TAtUz_xTo", "title": "예제로 보는 스프링 DI 개념과 사용법" },
    { "id": "B4MHKsDbD54", "title": "영속성 컨텍스트의 sql 지연 전략과 더티 체킹 전략은 객체 모델링에 집중할 수 있게 해주고 sql 실행을 한번에 처리해서 성능을 높일 수 있습니다" },
    { "id": "GjyPQks1y0o", "title": "OneToMany의 경우 일에 해당하는 매핑 엔터티에 외래키를 줄 수 없기 때문에 상대쪽에 외래키를 지정해줘야 합니다" },
    { "id": "D5UZUT2jXjY", "title": "JPA 연관관계에서 외래키의 소유는 중요합니다  외래키 관리 여부를 단방향에서는 @JoinColumn으로, 양방향에서는 mappedBy를 이용해서 설정합니다" },
    { "id": "4FNAH8-bBno", "title": "단방향 매핑을 이용해 게시물 작성자 정보 가져오기" },
    { "id": "BvCLgtu5mGA", "title": "테이블 관계에서 1대N의 경우 외래키를 N쪽에 갖는다" },
    { "id": "TWx3edVezh4", "title": "N+1 문제 확인  연관된 테이블의 데이터를 조회하기 위해 최초 쿼리의 결과 개수N만큼 추가 조회 쿼리가 작동하는 문제  batch size를 적용하여 해결 가능" },
    { "id": "OK6kWQ68OQ8", "title": "@ManyToMany 옵션은 중계 테이블에 대한 설계가 제한적이어서 잘 사용하지 않습니다  중계 엔터티를 직접 만들어 1N  N1을 조합하는 방식으로 사용하는 것이 일반적입니다" },
    { "id": "eXYKgu1RSXc", "title": "데이터베이스에서 다대다는 두개의 테이블로 표현할 수 없다  따라서 중계 테이블이 필요하다  JPA에서 @ManyToMany를 사용하면 JPA가 중계 테이블을 자동으로 만들어준다." },
    { "id": "B7V9KwSCtyI", "title": "orphanRemoval을 사용하면 자식 부모를 통해 자식을 DB에서 삭제할 수 있다  그러나 삭제는 언제나 조심히 사용해야 한다" },
    { "id": "3cwHJ38akoc", "title": "Cascade를 이용하면 부모가 자식에게 영속성을 전파할 수 있고 부모 객체 중점적으로 개발이 가능하다" },
    { "id": "c9nuc8XFpVk", "title": "jpql을 사용할 때 엔터티의 구조에서 벗어난 방식으로 데이터를 가져오려고 하면 에러가 난다.  담을 그릇이 없기 때문이다.  이럴 때는 데이터 전용 객체인 dto 사용하자." },
    { "id": "xUE__Ko6NZU", "title": "jpa에서 직접 sql을 짜서 데이터를 가져올 수 있다 단, 그 sql 언어는 mysql이 아닌 jpql이라는 jpa 전용 sql이다" },
    { "id": "0_RZcyrEmW4", "title": "월별 게시물 개수 구하기 예제" },
    { "id": "e5qDAkhdLT4", "title": "queryDsl을 이용해 검색 쿼리 동적으로 만들고 사용해 보기" },
    { "id": "caPDiDQJBmU", "title": "QueryDSL 라이브러리 로드, ArticleRepository 에 QueryDSL 적용" },
    { "id": "UtzYtkmHZWY", "title": "테일윈드와 daisyUI를 사용하면 최소한의 노력으로 꽤 깔끔한 UI를 만들 수 있습니다" },
    { "id": "ZRqZrLzWCrk", "title": "접속정보를 이용해 스프링 앱과 postgresql db 연결하고 테스트" },
    { "id": "omfoAvJvg2E", "title": "postgresql 컨테이너 생성하기" },
    { "id": "YWCldw8Zm1I", "title": "데이터 베이스 구성 준비를 위한 짧은 개념 확인" },
    { "id": "sWgE1O7E0R0", "title": "dockerfile을 이용해 컨테이너 생성하고 배포하기" },
    { "id": "pRyo0H1DEBk", "title": "도커 간단 개념2    컴퓨터 안에 컴퓨터가 컨테이너고 도커는 컨테이너 실행 환경 및 관리 도구이다" },
    { "id": "Yf72E8S00wQ", "title": "도커 간단 개념1   애플리케이션은 서버 환경에 의존적이다" },
    { "id": "1P2FQytt8MU", "title": "flyctl 설치하고 fly io와 연동" },
    { "id": "HoR1Fet2G-Q", "title": "fly io 가입하고 카드 등록" },
    { "id": "_zB23TZpz6w", "title": "정확도 평가 및 예측하기" },
    { "id": "sRePFXSIRas", "title": "모델 훈련" },
    { "id": "gqQabhWKrqU", "title": "모델 구성" },
    { "id": "4FqmiTTayPo", "title": "딥러닝 신경망 간단 개념" },
    { "id": "HZu_7fdFg00", "title": "정규화" },
    { "id": "4NylR9ANCPM", "title": "배열로 된 이미지 데이터를 실제 이미지로 출력하고 확인" },
    { "id": "EhwUPqlEczU", "title": "데이터 확인" },
    { "id": "xkCzlQxDUQY", "title": "딥러닝 인트로" },
    { "id": "wNAVFhgnUBE", "title": "git fetch 후 merge를 이용해 작업폴더에 반영하기 with 챗gpt" },
    { "id": "WLBUBFMnQKA", "title": "원격 레포지터리를 이용하면 개인이 장소 제약 없이 작업 가능하며 협업도 할 수 있다" },
    { "id": "ewDTBRji1Ms", "title": "브랜치 이름으로 checkout 하면 해당 브랜치의 최신 상태로 되돌아간다" },
    { "id": "93Q84vyegJ8", "title": "commit을 할 때는 내가 누구인지 밝히고 어떤 작업을 했는지 메시지를 남겨야 한다" },
    { "id": "9N3enf_qf3A", "title": "git commit 저장하고 checkout으로 특정 commit 불러오기 실습" },
    { "id": "8kt6wuv81hk", "title": "push한 src 파일들을 새로운 프로젝트에 pull" },
    { "id": "smZ-jN4wigg", "title": "src 폴더의 파일을 git에 저장하고 원격저장소에 push" },
    { "id": "nEDwlIDtw8k", "title": "자바 if, else if, else" },
    { "id": "iOTCmaJEyvs", "title": "조건문 if" },
    { "id": "_o69jqht6yo", "title": "논리연산자" },
    { "id": "6ocHzqXCK1A", "title": "비교연산자 문제 풀이" },
    { "id": "yrclgyWImpo", "title": "산술연산자, 비교연산자" },
    { "id": "66nLe2yYtFc", "title": "변수 문제풀이" },
    { "id": "GWqZo8URnhM", "title": "변수 사용시 주의사항" },
    { "id": "z46t4r9aHPc", "title": "변수" },
    { "id": "J7IIQza1q_k", "title": "문자열과 숫자 더하기" },
    { "id": "EOkUgu22ZEs", "title": "문자열 더하기, 숫자 더하기" },
    { "id": "Q_y_p0hsAfA", "title": "줄바꿈 문자" },
    { "id": "EcL9Yndt5W0", "title": "숫자와 문자 출력" },
    { "id": "yPFCgEqqB_o", "title": "자바 프로그램의 시작점 main" },
    { "id": "LlVv18aHJ58", "title": "2중 반복문과 구구단" },
    { "id": "ESkBEV71cM0", "title": "변수의 증가, 감소, 그리고 증감 연산자" },
    { "id": "femFansmWV8", "title": "구구단 2단부터 9단까지 만들기" },
    { "id": "5ai_gwZ7guk", "title": "반복문 수열 예제" },
    { "id": "G5wqZD20zcs", "title": "while 반복 제어" },
    { "id": "oam6YD98kj8", "title": "while 기본 구조" },
    { "id": "UEzxky68gEM", "title": "배열은 하나의 변수로 여러 개의 값을 저장하고 사용할 수 있어 편리하다" },
    { "id": "qZtrXca3n68", "title": "객체는 클래스의 복사본이며 여러개의 복사본을 만들어 데이터를 따로 관리할 수 있다" },
    { "id": "0TY8umlzRck", "title": "변수 저장 방식과 객체 저장 방식 비주얼라이저로 확인하기" },
    { "id": "6W5i2tCH5Qo", "title": "클래스는 특정 데이터를 묶어서 그룹화하는 것이다  그룹화 하면 많은 것이 편해진다" },
    { "id": "T7QLLSpRquk", "title": "변수만을 이용해 사람 정보 저장 변수만 이용해서 저장하면 데이터 관리가 복잡해진다" },
    { "id": "vyobM_Ss_aI", "title": "사실 객체는 일반적으로 static을 사용하지 않는다  static은 static이 붙은 대상만 사용 가능하다" },
    { "id": "iqrg7fTZ0gs", "title": "static 변수와 일반 객체 변수가 메모리에 생성되는 과정을 visualizer로 확인" },
    { "id": "rkPOkqdh_Pk", "title": "함수 밖으로 빼서 static을 붙이면 static 함수가 해당 변수를 공유할 수 있다" },
    { "id": "iDNDejjI3qs", "title": "리턴을 이용해 함수가 처리한 결과를 받아볼 수 있다  함수의 결과를 2차적으로 작업할 수 있다" },
    { "id": "8OpnxWnAYxA", "title": "매개변수를 이용하면 메서드함수를 좀더 확장적으로 사용할 수 있다" },
    { "id": "0qmyIEOiO7E", "title": "메서드함수는 코드를 저장하고 재사용하기 위해 사용한다  가장 작은 단위의 프로그램이다" },
    { "id": "sDfcSckLHvE", "title": "자바 메모리 구조" },
    { "id": "VBTFg9JBzaQ", "title": "객체의 실체와 참조값을 구분해야 한다" },
    { "id": "oXSm2kKAZC8", "title": "객체의 형변환을 활용하면 많은 객체를 좀더 단순하고 직관적으로 다룰 수 있다" },
    { "id": "NnvK2paH4OE", "title": "객체 자료형의 형변환  상속 관계인 객체끼리만 형변환 허용하며 상위타입이 하위타입으로의 형변환은 안전하지만 그 반대는 위험" },
    { "id": "ZPOS7OdtfG8", "title": "기본 자료형의 형변환 그리고 자동형변환, 수동형변환" },
    { "id": "shiBvjEUcpE", "title": "객체 구성을 이용한 이순신주식회사 만들기 예제" },
    { "id": "QhWz5MkrPfE", "title": "객체를 또 다른 객체로 구성하여 중복을 해결할 수 있다  홍길동과 홍길순 예제로 보는 구성예제" },
    { "id": "d7tabGEnYX4", "title": "상속만으로는 모든 중복을 해결할 수 없고 상속은 잘못쓰면 위험하기 때문에 한계가 있다" },
    { "id": "0s6ndD_r71o", "title": "서로 다른 객체에서 중복이 발생될 수도 있다  객체간의 중복을 해결하기 위해 상속을 사용한다" },
    { "id": "KJzPvQtKcY8", "title": "오리시뮬레이션 풀이6" },
    { "id": "fL7dL7Xvn5g", "title": "오리시뮬레이션 풀이5" },
    { "id": "wkr0JM33_FU", "title": "오리시뮬레이션 풀이4" },
    { "id": "y03VGzHdBrY", "title": "오리시뮬레이션 풀이3" },
    { "id": "8VUhWoi4arc", "title": "오리시뮬레이션 풀이2" },
    { "id": "Xb5xYYo1NlU", "title": "오리시뮬레이션 풀이1" },
    { "id": "duUuNwe8f14", "title": "계좌 만들기 예금 입금 기능 구현" },
    { "id": "YfFpgC-z2nY", "title": "계좌 만들기 출금 기능 구현" },
    { "id": "PZIOA44DsCw", "title": "계좌 만들기 잔액 확인 기능 구현" },
    { "id": "oOOxRUYT-Yg", "title": "ngrok를 이용해 빠르게 내 애플리케이션 임시 배포하기" },
    { "id": "ynlOYKe9aEM", "title": "스프링 시큐리티 인증 말고 내가 구현한 로그인을 계속 사용할 수도 있음" }, 
    { "id": "35shiAwQSeU", "title": "스프링 시큐리티 적용하고 필터 체인 커스터마이징하기" }, 
    { "id": "dYGCgzwJZJ4", "title": "3차 필수미션  토스트 에디터 적용" }, 
    { "id": "Nte-x4qmWiE", "title": "3차 필수미션  로그아웃 구현" }, 
    { "id": "pmWUgA_m2b4", "title": "3차 필수미션  UserDetailService를 이용해 인증에 필요한 회원 정보 시큐리티에게 전달하기" }, 
    { "id": "E2Oc9gALqf0", "title": "3차 필수미션  스프링 시큐리티를 도입하고 로그인 및 회원가입 구현" }, 
    { "id": "V1W1Ump76r8", "title": "3차 필수미션  노트이름 변경하기" }, 
    { "id": "VydohMD2tLA", "title": "3차 필수미션  노트 삭제하기" }, 
    { "id": "VXPcJyaBw4o", "title": "3차 선택미션 2 2  타임리프 코드 정리 및 각 노트에 라디오 버튼  추가" }, 
    { "id": "TWC5buil9z8", "title": "3차 선택미션 2 4  선택한 노트를 목적 노트의 하위 노트로 편입시키기" }, 
    { "id": "TOR3lK5sn-A", "title": "3차 선택미션 2 3 내가 선택한 노트의 하위 노트는 선택하지 못하게 막기" }, 
    { "id": "c640KQWtSiQ", "title": "3차 선택미션 2 1  노트 이동 일단 노트 리스트 팝업 완성" }, 
    { "id": "6CQd8oAY8bM", "title": "3차 선택미션  구글 소셜 로그인 구현" }, 
    { "id": "7i6vAzhcXGc", "title": "enum이 뭔가요? enum은 열거형이라고 불리는 상수 집합입니다. 이넘은 좋은넘입니다." },
    { "id": "lOLrlf9gqvA", "title": "스프링에 서블릿 필터 등록하고 모든 요청을 검사하기" },
    { "id": "MDJoYh-hOF8", "title": "권한 체크 기능 구현 하고 관리자 기능 테스트하기" },
    { "id": "J3qHyalHZOA", "title": "2차 필수미션2 노트 추가 버튼 만들고 추가 기능 구현  노트 추가할 때 기본 페이지 자동 추가 구현" },
    { "id": "cJHZLqlg56g", "title": "2차 필수미션1 3 노트 목록 출력 그러나 페이지 누르면 사라짐" },
    { "id": "UvCflFtK0gI", "title": "2차 필수미션1 4페이지 상세보기 누르면 노트 목록 사라지는 현상 해결  노트북과 노트페이지 연결" },
    { "id": "_t4IIYPhpLE", "title": "2차 필수미션1 5 선택한 노트의 페이지 목록만 보여주기" },
    { "id": "fPiLgI3JGJw", "title": "2차 필수미션1 6 페이지 추가하면 전체 페이지가 다 나오는 버그 수정" },
    { "id": "8w8x6m3y9jk", "title": "2차 필수미션1 2 노트북과 노트 페이지 관계 설정 및 JPA 양방향 매핑 원리" },
    { "id": "MvWE9QWzdjU", "title": "2차 선택미션 3 1  새노트 추가하면 새노트 선택되게 하기" },
    { "id": "3K3a3bhYJ0w", "title": "2차 선택미션2  하위노트 추가 기능 만들기" },
    { "id": "ubM8sjE9pN0", "title": "2차 선택미션 1 6   하위노트를 재귀적 구조를 이용해 뎁스를 깊게 가져가기" },
    { "id": "lkgwVtN3rMo", "title": "2차 선택미션3 2  노트 선택할 때마다 하위노트 접히는 문제 해결" },
    { "id": "pSCxmhSVb0w", "title": "2차 선택미션 추가 기능 사항  페이지 추가시 노트 선택 초기화 되는 문제 해결" },
    { "id": "A-Ywr1P3ZYU", "title": "스프링부트 기초    컨트롤러의 의미와 역할" },
    { "id": "SFcEfVwyIns", "title": "역할 분리와 추후 재사용성을 위해 컨트롤러에서 서비스 로직 분리" },
    { "id": "8P1UfIfq2s8", "title": "리다이렉트를 이용해 컨트롤러 함수 재호출하기" },
    { "id": "ojWW1a0CNIc", "title": "게시물 수정 반영하고 다시 상세보기로 돌아가기" },
    { "id": "cczcly0ite0", "title": "게시물 찾는 코드가 중복된다  중복된 코드 함수로 빼기" },
    { "id": "Kanbk3g9BW4", "title": "게시물 수정 기능 구현  원래 데이터 세팅" },
    { "id": "XWH1gcg0tiI", "title": "서블릿 기초 개념과 프로젝트 세팅 방법" },
    { "id": "ply4_PSXw6o", "title": "포워딩을 이용해 작업을 다른 곳에 위임하기  jsp를 이용해 출력" },
    { "id": "UnOkrIM3SS0", "title": "리다이렉트 개념과 리다이렉트를 써야 하는 이유" },
    { "id": "tVwHIZ8TvsA", "title": "템플릿 상속으로 코드 중복 해결하고 쿠키를 이용해 로그인 유지하기" },
    { "id": "dTHur9CyiTk", "title": "네비게이션 메뉴 만들기" },
    { "id": "PIOOurXFCgY", "title": "쿠키를 삭제해서 로그아웃 기능 구현하기" },
    { "id": "xZeZEDCYRHA", "title": "로그인 구현   로그인 페이지 및 로그인 처리 구현" },
    { "id": "xDQeBq_4BCA", "title": "웹에서 로그인을 하기 위해 알아야 하는 개념1   요청과 응답" },
    { "id": "KfTNVmx9WQA", "title": "블로그 만들기 테스트   5  포스트 레포지터리 만들고 템플릿에 실제 데이터 전달하고 출력" },
    { "id": "EeV37wYH5TQ", "title": "테일윈드 기본 개념 및 사용법" },
    { "id": "pkrMUWvliUg", "title": "텍게 요구사항 18   페이징 관련 정보를 클래스로 만들기" },
    { "id": "WNIH5INLxC0", "title": "HTML 문제 34   메뉴 만들기" },
    { "id": "2-KWlEPv5pU", "title": "텍스트 게시판 스프링부트 적용   html로 게시물 표현하기  자바 문자열로 html 그리기는 힘들다  템플릿을 쓰자" },
    { "id": "oZMyMvmDQZw", "title": "텍스트 게시판 스프링부트 적용   search 적용  스프링부트에게 전달하는 파라미터는 기본값을 지정할 수 있다" },
    { "id": "jrysRggMo6U", "title": "텍스트 게시판 스프링부트 적용   delete 적용  스프링부트는 자바의 모든 자료형을 JSON이라는 형태로 브라우저에 전달한다" },
    { "id": "l_ayEqli0HE", "title": "텍스트 게시판 스프링부트 적용   add 기능 적용  브라우저에서 스프링에 데이터를 url을 통해 넘길 수 있다" },
    { "id": "_oUSddEk2eU", "title": "텍스트 게시판 스프링부트 적용   update 기능 동일하게 적용" },
    { "id": "nRPJdDVI-sU", "title": "텍스트 게시판 스프링부트에 적용하기   텍스트 게시판 코드 스프링부트로 옮기고 컨트롤러로 실행해보기" },
    { "id": "Cun0v1eLT3Q", "title": "웹 개념   자바가 웹에서 하는 일" },
    { "id": "KhG11nUamFk", "title": "웹 개념   IP, Port, URL 개념" },
    { "id": "A7cix87LfZg", "title": "웹 개념   웹 서비스가 이루어지는 방식" },
    { "id": "bTqAYtvBzX8", "title": "스프링 개념   의존성 주입과 autowired" },
    { "id": "EpVQXdd2Nm0", "title": "스프링 개념   스프링 컨테이너와 스프링 빈" },
    { "id": "difvHzVUWvE", "title": "스프링 개념   프레임워크의 개념과 제어 역전IoC" },
    { "id": "0x7BLk6wJQI", "title": "스프링부트 초기 설정   편한 개발을 위해 Live Reload 설정하기" },
    { "id": "ZcZ9n9KauZI", "title": "스프링부트 초기 설정   스프링부트 개념과 프로젝트 구성 방법" },
    { "id": "S7vkvNpxy-U", "title": "스프링부트 초기 설정   프로젝트 필수 환경 설정" },
    { "id": "OlJ5u3yPzXM", "title": "텍스트 게시판 스프링부트 적용   detail 적용  내가 직접 자바 객체를 json 문자열로 변환해야 할 때가 있다  jackson을 쓰자" },
    { "id": "rsW2NbuZiRg", "title": "게시물 수정하기 DB 적용" },
    { "id": "phNlsJv1AQg", "title": "jpa repository를 이용해 게시물 목록 가져오기" },
    { "id": "TZ_XuE9gzZQ", "title": "GeneratedValue를 이용해 auto increment 걸기" },
    { "id": "IEGLpgxMNG4", "title": "JPA 도입해서 DB 연결" },
    { "id": "GvNlaEir1_Q", "title": "게시물 상세보기 페이지 구현하고 확인" },
    { "id": "3TrQ4fKAD2M", "title": "텍게 요구사항 14   로그인 기능 구현" },
    { "id": "5y6uakgtCqw", "title": "텍게 요구사항 11   상세보기 메뉴 만들기" },
    { "id": "A8S6LOM9v5g", "title": "SQL 조회 - 문자열 포함 여부" },
    { "id": "WuYo3cbHqJA", "title": "SQL 조회 - 정렬" },
    { "id": "TqwapVgZjpU", "title": "SQL 조회 - 연산자" },
    { "id": "9JD4APVVDAU", "title": "텍게 요구사항 16   좋아요" },
    { "id": "pO3jlWIthXQ", "title": "텍스트 분석 기본 프로세스" },
    { "id": "k4fpjyEGYrs", "title": "텍스트 분석을 위한 카운트 벡터화하고 모델 학습 및 평가" },
    { "id": "r3DFe-G-SE8", "title": "텍게 요구사항 15   로그인해야만 가능한 기능들 추가" },
    { "id": "b7GBHm1QJw8", "title": "텍게 요구사항 15   글쓰기 회원만 가능하도록 변경" },
    { "id": "_MFrU0eJJBQ", "title": "텍게 요구사항 15   내 게시물 삭제 구현" },
    { "id": "u3qKgrgzV6Q", "title": "텍게 요구사항 15 -  내 게시물 수정 구현" },
    { "id": "Vd1bme558Zc", "title": "테이블 분리해야 하는 이유" },
    { "id": "c--yZ6hlZko", "title": "단일 테이블 쇼핑몰 주문 데이터 문제 풀이" },
    { "id": "xSCHuSNnMKw", "title": "그룹핑 문제 풀이" },
    { "id": "tUELD_5WHgc", "title": "그룹핑은 집계함수와 같이 쓸 때 좋다" },
    { "id": "8CphlBLGJmE", "title": "distinct와 group by로 중복 제거로 고유값범주 구하기" },
    { "id": "1u5Z49S8s04", "title": "IF, CASE WHEN 문제 풀이" },
    { "id": "WJJvfEQj_14", "title": "조건 처리하기   IF, CASE WHEN" },
    { "id": "nDFgU6OouWQ", "title": "게시물 정렬 기능 구현하기 전에 자바 정렬 방법 알아보기1 - 자바 단일값 ArrayList 정렬하기" },
    { "id": "iuubOLeWbPY", "title": "게시물 정렬 기능 구현하기 전에 자바 정렬 방법 알아보기2 - 자바 객체 ArrayList 정렬하기" },
    { "id": "DRsAQy0o1UQ", "title": "인덱스 예제2" },
    { "id": "gmSaEAia5VM", "title": "인덱스 예제1" },
    { "id": "GlNVNdIzDUA", "title": "서브쿼리1" },
    { "id": "lKzoAulMn3Y", "title": "w3schools 문제 월별 매출" },
    { "id": "oZ6iDfIwSHU", "title": "w3schools 문제 고객별 주문 건수아우터 조인 사용" },
    { "id": "tYTsHcbdL4Y", "title": "w3schools 문제 고객별 매출" },
    { "id": "c88u4y8blVI", "title": "텍게 요구사항 17   게시물 정렬 기능 오름차순, 내림차순 합치기" },
    { "id": "oa2IosE16ow", "title": "텍게 요구사항 17   게시물 정렬 모두 구현" },
    { "id": "VlumDwHwjGc", "title": "텍게 요구사항 17   게시물 번호순으로 정렬 구현" },
    { "id": "0y2LSC4C0w4", "title": "DB를 사용하여 명령어 프로그램 만들기 예제 소개" },
    { "id": "6_jfiSqu_1I", "title": "JDBC를 이용해 자바로 데이터를 여러개 가져오기반복" },
    { "id": "h2gaQMAmtC0", "title": "Maven Repository는 자바계의 앱스토어이다  인증된 많은 프로그램을 다운로드 받고 사용할 수 있다  이를 위해 Gradle을 사용한다" },
    { "id": "CqB_mlJouaA", "title": "JDBC를 이용해 자바로 데이터 가져오기 예제" },
    { "id": "NEVQr0W-OYU", "title": "각 DB 제조사들은 자바로 자신들의 DB를 제어할 수 있는 드라이버 프로그램을 제공한다  드라이버 사용법을 JDBC라고 한다" },
    { "id": "45TVo_dxOrs", "title": "프로그램이 데이터를 반영구적으로 저장하기 위해 DB를 사용한다" },
    { "id": "VIAOBL2FvIw", "title": "영화 관객수 예측 실습 - 범주형 데이터 처리하기" },
    { "id": "B4zrxr6Y5bk", "title": "영화 관객수 예측 실습 - 범주형 데이터 처리 전략 짜기" },
    { "id": "ZqPGnu3Joes", "title": "영화 관객수 예측 실습 - 결측치 및 오기입 데이터 처리" },
    { "id": "YHqCa4TQ1kw", "title": "텍게 요구사항 18   페이징 기능 입력한 페이지 번호에 맞게 게시물 가져오기" },
    { "id": "ycDleuEsDCE", "title": "텍게 요구사항 18   원하는 페이지 번호 선택하기" },
    { "id": "CxfetWDWTJg", "title": "텍게 요구사항 18   페이징 기능  한번에 보여줄 페이지 5개로 제한" },
    { "id": "JnPTfrMKOJw", "title": "텍게 요구사항 18   페이징 기능  아이템의 개수에 맞게 페이지 만들기" },
    { "id": "bZ5aK0DKb5U", "title": "텍게 요구사항 17   게시물 정렬 다형성 이용한 코드 개선" },
    { "id": "sG6OErjsTVQ", "title": "JDBC를 이용해 주소록 목록 출력하기 구현" },
    { "id": "Sq0hBZR9X4s", "title": "JDBC코드는 더럽다  더러운 코드는 따로 모아서 관리하고 주요 로직에서 안보이게 하는게 낫다" },
    { "id": "KS7e4q2ipgo", "title": "JDBC 관련 객체는 지속적으로 컴퓨터 자원을 소모한다  성능과 안정성을 위해 꼭 객체를 닫아준다" },
    { "id": "CVSX893awjU", "title": "JDBC를 이용해 주소록 추가 기능 구현" },
    { "id": "iGfFjLtn9Zc", "title": "핵심 로직 메인에서 분리" },
    { "id": "1y6wo_SqviQ", "title": "기본적인 sql 연습문제 풀이3" },
    { "id": "VVce4g6VWLU", "title": "텍게 요구사항 13   회원가입" },
    { "id": "adLSTR6rlFs", "title": "텍게 요구사항 12    댓글 등록" },
    { "id": "BSMHdppMTJ0", "title": "텍게 요구사항 12   댓글 목록 출력" },
    { "id": "2kfViiqNWyY", "title": "텍게 요구사항 12   댓글 기능 MVC 패턴 적용" }
  ],
  "playlists": [
    {
      "title": "JSP 게시판",
      "videos": [
        { "id": "cnw5eMzSPrg", "title": "web이란" },
        { "id": "9uc1ZKY3jIQ", "title": "웹브라우저와 웹서버" },
        { "id": "aBtU00_hd-g", "title": "요청과 응답, 정적웹서비스" },
        { "id": "e9VHkqCHoxk", "title": "동적웹서비스" },
        { "id": "CnGyAVPrC2M", "title": "톰캣 설치" },
        { "id": "okmmCYYdN68", "title": "톰캣 정적파일 기본 위치" },
        { "id": "uEDbvYROdZI", "title": "포트번호를 이용해 톰캣에 요청 보내기" },
        { "id": "MUhejbVu2uY", "title": "톰캣을 이용해 자원 제공" },
        { "id": "53tYrK9coC8", "title": "웹서버 세팅 후 자원 가져오기 다시" },
        { "id": "-Zj1AznP82w", "title": "HTTP 특성" },
        { "id": "kQ7jMibgN6g", "title": "HTML 개념" },
        { "id": "dNwPkDwv8Aw", "title": "CGI 개념" },
        { "id": "U5C1K6LAzjw", "title": "서블릿 개념" },
        { "id": "pzlWO3SZXkg", "title": "서블릿 만들고 요청하기" },
        { "id": "0PEy51sr9Mw", "title": "웹의 흐름과 서블릿 흐름" },
        { "id": "YT1b7ERiAfU", "title": "서블릿 추가 생성 및 테스트" },
        { "id": "WnaiEyS5pco", "title": "요청한 브라우저에 출력하기" },
        { "id": "7XH_Q_yGvXc", "title": "인코딩 개념과 설정" },
        { "id": "bajBPejVF6k", "title": "HTML로 응답하기" },
        { "id": "9yVhm16UOXs", "title": "클라이언트에서 서버로 데이터 보내기   queryString" },
        { "id": "yaxgWI6iSds", "title": "FORM 태그를 이용해 데이터 넘기기" },
        { "id": "_5xXguOjy5I", "title": "JDBC 이용한 데이터 저장" },
        { "id": "uvriwNEHDrg", "title": "JDBC 개념 리뷰" },
        { "id": "mELje2vJDo4", "title": "JDBC를 이용해 DB에서 데이터 꺼내오기" },
        { "id": "FjyD35XUIGw", "title": "서블릿으로 DB 데이터 서비스하기" },
        { "id": "3zJnvjFuQ3o", "title": "JSP 이해하고 사용해보기" },
        { "id": "-F54vVUdjck", "title": "JSP란" },
        { "id": "BP5bhHIArmc", "title": "Jasper가 서블릿으로 파싱한 JSP 코드 보기" },
        { "id": "Ow8cymgwaoo", "title": "JSP를 이용해 자바코드 작성해 보기" },
        { "id": "Tb97gtBLthc", "title": "JSP 내장객체와 파라미터 받는 법" },
        { "id": "hUZDAL7yeP4", "title": "JSP로 주소목록 출력하기" },
        { "id": "HmDptB5U_vo", "title": "model1 버전에서 model2 버전으로" },
        { "id": "v34R00NM64w", "title": "jstl 일반 반복문 사용법" },
        { "id": "qDanTU5Qigk", "title": "jstl 범위기반 반복문 사용법과 주소 목록 기능에 적용하기" },
        { "id": "4Vn55sUde3U", "title": "jstl 조건문 사용법" },
        { "id": "9_hYcqJ7kxg", "title": "URI 요청 분석을 통한 기능 제공" },
        { "id": "rqPKi3ai-pE", "title": "요구사항1 추가 작업 - 절대경로, 상대경로, 포워드 메서드 작성, 리다이렉트 처리  등" },
        { "id": "UKY_Oii3vnc", "title": "게시물 상세 진행중" },
        { "id": "c7Sgq5JzI6Y", "title": "게시물 상세, 수정 기능 완료" },
        { "id": "sCNw-JwEQLY", "title": "GET과 POST 차이와 구분해서 처리하기" },
        { "id": "wWDVPIjWKcc", "title": "게시물 삭제" },
        { "id": "tVEoBDP62Sk", "title": "회원 가입 구현 및 URL 문제 확인" },
        { "id": "qcDRc_hEigE", "title": "url  do 처리" },
        { "id": "hfI_p5rYXEc", "title": "로그인 정보로 회원 정보 가져오기" },
        { "id": "H7h57_Cnx9c", "title": "로그인 기능 1차 구현" },
        { "id": "vxrOzkQGAdY", "title": "로그인 기능 구현시 request로는 어려운 이유" },
        { "id": "UEkdgDlKY6E", "title": "로그인 세션 저장 및 스코프 테스트" },
        { "id": "Jcbfi_ANs6E", "title": "세션을 이용한 로그인 구현" },
        { "id": "U283NB671JA", "title": "쿠키를 이용해 클라이언트에 데이터 저장" },
        { "id": "Yy6uZD2eefQ", "title": "쿠키 옵션 및 쿠기 주고 받기" },
        { "id": "rB5QavEkwR8", "title": "jsp 조각페이지 만들고 재사용하기" },
        { "id": "Z5_VWJ9IDe0", "title": "서블릿 필터 사용하기" },
        { "id": "PPBEeZElkKY", "title": "필터 버그 해결 - doChain() 중복으로 인한 중복 응답이 원인" },
        { "id": "dvLIc9_G8GI", "title": "댓글 등록" },
        { "id": "IKRzFqzPE84", "title": "댓글 목록" },
        { "id": "F2_zN8ImTYc", "title": "댓글 수정" },
        { "id": "BVQFdSwDRI0", "title": "컨트롤러 요청별 응답 코드 메서드 처리" },
        { "id": "YxacCYBZs9E", "title": "패키지 나누기 및 DB 추상화 작업1   제너릭" },
        { "id": "TBwtzNo3Pig", "title": "DB 추상화 작업2   인터페이스와 다형성" },
        { "id": "l6tbWaZrGVY", "title": "페이징1 1" },
        { "id": "kFtAHo_oqJY", "title": "페이징1 2" }
      ]
    }
  ]
}